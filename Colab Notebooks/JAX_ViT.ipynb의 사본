{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"JAX_ViT.ipynb의 사본","provenance":[{"file_id":"1yI1BCedF6NfTRBtOvIpNTej8dzmkZYFp","timestamp":1660798088150}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard","widgets":{"application/vnd.jupyter.widget-state+json":{"251ea7a2c7e748cab2e5ad1608dda971":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_32c59a3398c44f9fa870bcf95468dc04","IPY_MODEL_9263d238b5714f3a9e3a10dcb64d5106","IPY_MODEL_c12a887d99744dc1a04bac9bce50fe71"],"layout":"IPY_MODEL_7e7bf64316dd4a7fa03c69b5b4de6d98"}},"32c59a3398c44f9fa870bcf95468dc04":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ca9df43810104ae885d3ba50711e93b9","placeholder":"​","style":"IPY_MODEL_410a536225b744d4bdbd9dc7a7cbf536","value":"100%"}},"9263d238b5714f3a9e3a10dcb64d5106":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_48e47651b7564c93bb21d6866d742b25","max":9912422,"min":0,"orientation":"horizontal","style":"IPY_MODEL_85c04c047dbd47928d28b278a47bfb6e","value":9912422}},"c12a887d99744dc1a04bac9bce50fe71":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_44723f5adc7141658a464c8de55d0d14","placeholder":"​","style":"IPY_MODEL_14ec6c34cbcd4ec8bb50bf368f8d73ab","value":" 9912422/9912422 [00:00&lt;00:00, 109537464.05it/s]"}},"7e7bf64316dd4a7fa03c69b5b4de6d98":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ca9df43810104ae885d3ba50711e93b9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"410a536225b744d4bdbd9dc7a7cbf536":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"48e47651b7564c93bb21d6866d742b25":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"85c04c047dbd47928d28b278a47bfb6e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"44723f5adc7141658a464c8de55d0d14":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"14ec6c34cbcd4ec8bb50bf368f8d73ab":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d1d707e9b22c491c90b3525ad7627532":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3ff8571a849f43f8a8b8a3f7fb0041bb","IPY_MODEL_6ff599d7a83749b5bc0007af6af3c202","IPY_MODEL_f3111db85c064c60a4844a68cbc5864f"],"layout":"IPY_MODEL_5118aefb089443988779d27d7e90e746"}},"3ff8571a849f43f8a8b8a3f7fb0041bb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b7c959090809462c85c698da9f2b7566","placeholder":"​","style":"IPY_MODEL_7bf0bfef884a4043be56e25f182439f3","value":"100%"}},"6ff599d7a83749b5bc0007af6af3c202":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a98042e5a7cf4de6ab6adc52c610767c","max":28881,"min":0,"orientation":"horizontal","style":"IPY_MODEL_fa9e7ced5dc84af69cea572a88db58d6","value":28881}},"f3111db85c064c60a4844a68cbc5864f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e1a239e23feb419fadb47f47e2559c9e","placeholder":"​","style":"IPY_MODEL_802f640ac8b945278fee01e3701a02dc","value":" 28881/28881 [00:00&lt;00:00, 843316.67it/s]"}},"5118aefb089443988779d27d7e90e746":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b7c959090809462c85c698da9f2b7566":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7bf0bfef884a4043be56e25f182439f3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a98042e5a7cf4de6ab6adc52c610767c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fa9e7ced5dc84af69cea572a88db58d6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e1a239e23feb419fadb47f47e2559c9e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"802f640ac8b945278fee01e3701a02dc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a5e14a522be04c29a00df31620f81a32":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a7c6ba7f7320461fa732cb5860354b74","IPY_MODEL_ba4c48cece8a4e868da3b5bc5a028f2e","IPY_MODEL_10d54f77a15448f79044053af8c6c31f"],"layout":"IPY_MODEL_a554f8c26b1040d59791b2e5b8f46b7f"}},"a7c6ba7f7320461fa732cb5860354b74":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_03ab7726a4d7485ebad5cb5f5dd967d0","placeholder":"​","style":"IPY_MODEL_dc75839c603e431da29ad924004703bb","value":"100%"}},"ba4c48cece8a4e868da3b5bc5a028f2e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f8c9d91380e3414bb93da35ff9611f71","max":1648877,"min":0,"orientation":"horizontal","style":"IPY_MODEL_653d812bdac04a3394fd402d4bf56a0d","value":1648877}},"10d54f77a15448f79044053af8c6c31f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bc2a3a8435ff4c50bac753b50e8031a1","placeholder":"​","style":"IPY_MODEL_0d48092f2c5c4a008f4ccb615577e1fe","value":" 1648877/1648877 [00:00&lt;00:00, 35968749.95it/s]"}},"a554f8c26b1040d59791b2e5b8f46b7f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"03ab7726a4d7485ebad5cb5f5dd967d0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dc75839c603e431da29ad924004703bb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f8c9d91380e3414bb93da35ff9611f71":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"653d812bdac04a3394fd402d4bf56a0d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bc2a3a8435ff4c50bac753b50e8031a1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0d48092f2c5c4a008f4ccb615577e1fe":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3b608e7e453240caa67a4dbdb6f9af11":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_170f2c4fcee2417b9170ce7c470b0854","IPY_MODEL_fd7eb2b376314674b4032937968aa977","IPY_MODEL_aac4637ef9c941f9923d765cfb1a9296"],"layout":"IPY_MODEL_c635390ffd154f0e97462de1b70fc12c"}},"170f2c4fcee2417b9170ce7c470b0854":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_61ef8f0888e240f09a0d34824f730888","placeholder":"​","style":"IPY_MODEL_ca38dd48268f4b3da2d5e5370a5427b3","value":"100%"}},"fd7eb2b376314674b4032937968aa977":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_7de7b76f5c6946e795e01b1324db81ef","max":4542,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cd7352fdaa8348eb839b37f91de2a25b","value":4542}},"aac4637ef9c941f9923d765cfb1a9296":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_835c9fd9fb2e4384b4b655cdd82cdfcc","placeholder":"​","style":"IPY_MODEL_9d22a983f8f548d1ae7f636d104a1c6e","value":" 4542/4542 [00:00&lt;00:00, 134284.43it/s]"}},"c635390ffd154f0e97462de1b70fc12c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"61ef8f0888e240f09a0d34824f730888":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ca38dd48268f4b3da2d5e5370a5427b3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7de7b76f5c6946e795e01b1324db81ef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cd7352fdaa8348eb839b37f91de2a25b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"835c9fd9fb2e4384b4b655cdd82cdfcc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9d22a983f8f548d1ae7f636d104a1c6e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["산업수학 기반 데이터 분석 프로그램\n","\n","김병천 (wizardbc@gmail.com)<br>\n","인하대학교 응용수학연구소 / 스마트소셜 AI 연구소\n","\n","2022년 8월 18일 (목)<br>\n","더케이호텔 서울, 금강A홀\n","\n","# Vision Transformer from Scratch (JAX)\n","\n","* 런타임 > 런타임 유형 변경 > 하드웨어 가속기 > GPU\n","\n","```\n","Devices: [GpuDevice(id=0, process_index=0)]\n","```\n","\n","[google-research/vision_transformer](https://github.com/google-research/vision_transformer)\n","![ViT](https://github.com/google-research/vision_transformer/raw/main/vit_figure.png)"],"metadata":{"id":"WsxykoinhLk3"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"Ne-8Qv1Ggjyg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660798473669,"user_tz":-540,"elapsed":17883,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"4596f17d-b415-46bf-bc9c-5c2fbf5b5c28"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 180 kB 34.9 MB/s \n","\u001b[K     |████████████████████████████████| 596 kB 2.3 MB/s \n","\u001b[K     |████████████████████████████████| 145 kB 63.4 MB/s \n","\u001b[K     |████████████████████████████████| 1.0 MB 65.7 MB/s \n","\u001b[K     |████████████████████████████████| 217 kB 60.9 MB/s \n","\u001b[K     |████████████████████████████████| 51 kB 6.9 MB/s \n","\u001b[K     |████████████████████████████████| 76 kB 4.6 MB/s \n","\u001b[?25h  Building wheel for jax (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Devices: [GpuDevice(id=0, process_index=0)]\n"]}],"source":["# For some low-memmory GPUs.\n","# %env XLA_PYTHON_CLIENT_PREALLOCATE=false\n","\n","import jax\n","import jax.numpy as jnp\n","from jax import grad, jit, vmap\n","from jax import random\n","\n","import numpy as np\n","from torch.utils.data import DataLoader\n","from torchvision.datasets.mnist import MNIST\n","\n","from functools import partial\n","import time\n","import matplotlib.pyplot as plt\n","\n","## Flax (NN in JAX)\n","try:\n","    import flax\n","except ModuleNotFoundError: # Install flax if missing\n","    !pip install --quiet flax\n","    import flax\n","from flax import linen as nn\n","\n","## Optax (Optimizers in JAX)\n","try:\n","    import optax\n","except ModuleNotFoundError: # Install optax if missing\n","    !pip install --quiet optax\n","    import optax\n","\n","## Typing\n","from typing import Any, Callable, Optional, Tuple, Type\n","\n","PRNGKey = Any\n","Shape = Tuple[int, ...]\n","Array = Any\n","Dtype = Any\n","\n","# Seeding for random operations\n","prng_key = random.PRNGKey(42)\n","\n","print(\"Devices:\", jax.devices())"]},{"cell_type":"code","source":["train_set = MNIST(root='./datasets', train=True, download=True, transform=lambda x: np.array(x, dtype=jnp.float32))\n","test_set = MNIST(root='./datasets', train=False, download=True, transform=lambda x: np.array(x, dtype=jnp.float32))\n","\n","len(train_set), len(test_set)"],"metadata":{"id":"VcA1BFLhqcW4","colab":{"base_uri":"https://localhost:8080/","height":454,"referenced_widgets":["251ea7a2c7e748cab2e5ad1608dda971","32c59a3398c44f9fa870bcf95468dc04","9263d238b5714f3a9e3a10dcb64d5106","c12a887d99744dc1a04bac9bce50fe71","7e7bf64316dd4a7fa03c69b5b4de6d98","ca9df43810104ae885d3ba50711e93b9","410a536225b744d4bdbd9dc7a7cbf536","48e47651b7564c93bb21d6866d742b25","85c04c047dbd47928d28b278a47bfb6e","44723f5adc7141658a464c8de55d0d14","14ec6c34cbcd4ec8bb50bf368f8d73ab","d1d707e9b22c491c90b3525ad7627532","3ff8571a849f43f8a8b8a3f7fb0041bb","6ff599d7a83749b5bc0007af6af3c202","f3111db85c064c60a4844a68cbc5864f","5118aefb089443988779d27d7e90e746","b7c959090809462c85c698da9f2b7566","7bf0bfef884a4043be56e25f182439f3","a98042e5a7cf4de6ab6adc52c610767c","fa9e7ced5dc84af69cea572a88db58d6","e1a239e23feb419fadb47f47e2559c9e","802f640ac8b945278fee01e3701a02dc","a5e14a522be04c29a00df31620f81a32","a7c6ba7f7320461fa732cb5860354b74","ba4c48cece8a4e868da3b5bc5a028f2e","10d54f77a15448f79044053af8c6c31f","a554f8c26b1040d59791b2e5b8f46b7f","03ab7726a4d7485ebad5cb5f5dd967d0","dc75839c603e431da29ad924004703bb","f8c9d91380e3414bb93da35ff9611f71","653d812bdac04a3394fd402d4bf56a0d","bc2a3a8435ff4c50bac753b50e8031a1","0d48092f2c5c4a008f4ccb615577e1fe","3b608e7e453240caa67a4dbdb6f9af11","170f2c4fcee2417b9170ce7c470b0854","fd7eb2b376314674b4032937968aa977","aac4637ef9c941f9923d765cfb1a9296","c635390ffd154f0e97462de1b70fc12c","61ef8f0888e240f09a0d34824f730888","ca38dd48268f4b3da2d5e5370a5427b3","7de7b76f5c6946e795e01b1324db81ef","cd7352fdaa8348eb839b37f91de2a25b","835c9fd9fb2e4384b4b655cdd82cdfcc","9d22a983f8f548d1ae7f636d104a1c6e"]},"executionInfo":{"status":"ok","timestamp":1660798479499,"user_tz":-540,"elapsed":773,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"17dce476-d2b1-42a1-8849-cbfc51291da4"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/9912422 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"251ea7a2c7e748cab2e5ad1608dda971"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./datasets/MNIST/raw/train-images-idx3-ubyte.gz to ./datasets/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/28881 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d1d707e9b22c491c90b3525ad7627532"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./datasets/MNIST/raw/train-labels-idx1-ubyte.gz to ./datasets/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/1648877 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a5e14a522be04c29a00df31620f81a32"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./datasets/MNIST/raw/t10k-images-idx3-ubyte.gz to ./datasets/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/4542 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3b608e7e453240caa67a4dbdb6f9af11"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Extracting ./datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./datasets/MNIST/raw\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["(60000, 10000)"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["plt.style.use('dark_background')\n","\n","for i in range(6):\n","    ax = plt.subplot(2, 3, i+1, )\n","    elt = test_set[i]\n","    ax.set_title(f'Test {i}, label: {elt[1]}')\n","    ax.imshow(elt[0].reshape(28,28), cmap='gray')\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"hbtYPVYFqdpZ","colab":{"base_uri":"https://localhost:8080/","height":298},"executionInfo":{"status":"ok","timestamp":1660798490066,"user_tz":-540,"elapsed":2667,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"cac944c0-7927-423e-fb0f-b3aafd4414f9"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 6 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["step_size = 0.001\n","num_epochs = 8\n","batch_size = 128\n","n_targets = 10\n","\n","train_loader = DataLoader(train_set, collate_fn=lambda b: tuple([np.stack(s) for s in zip(*b)]), shuffle=True, batch_size=batch_size)\n","\n","train_data = jnp.array(train_set.data, dtype=jnp.float32).reshape(-1,28,28,1)\n","train_targets = jax.nn.one_hot(jnp.array(train_set.targets), n_targets)\n","test_data = jnp.array(test_set.data, dtype=jnp.float32).reshape(-1,28,28,1)\n","test_targets = jax.nn.one_hot(jnp.array(test_set.targets), n_targets)"],"metadata":{"id":"acWAsYpIq-lW","executionInfo":{"status":"ok","timestamp":1660798490801,"user_tz":-540,"elapsed":742,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["for i, (x, y) in enumerate(train_loader):\n","    print(i, x.shape, y.shape)\n","    break"],"metadata":{"id":"Cd-4VIEErRC7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660798490801,"user_tz":-540,"elapsed":5,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"f8703753-5087-401f-a700-b93331916fc5"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["0 (128, 28, 28) (128,)\n"]}]},{"cell_type":"markdown","source":["## ViT\n","\n","* Input : (batch_size, width, height, channel) = (128, 28, 28, 1)\n","* Convolution : (128, 28, 28, 1) -> (128, 7, 7, 4, 4) -> (128, 7, 7, 8)\n","* Reshape : (128, 7, 7, 8) -> (128, 49, 8)\n","* Add trainable [cls] token : (128, 50, 8)\n","* Run through `encoder` : (128, 50, 8)\n","* Choose the [cls] : (128, 8)\n","* MLP Head : (128, 10)"],"metadata":{"id":"j5QhLobMVuXF"}},{"cell_type":"markdown","source":["```python\n","from jax.scipy.special import logsumexp\n","\n","class MyViT(nn.Module):\n","  \"\"\"VisionTransformer.\"\"\"\n","\n","  num_classes: int\n","  transformer: Any\n","  patch_size: Any = (4,4)\n","  hidden_size: int = 8\n","  representation_size: Optional[int] = 512\n","  head_bias_init: float = 0.\n","  encoder: Type[nn.Module] = Encoder\n","  model_name: Optional[str] = None\n","\n","  @nn.compact\n","  def __call__(self, x):\n","\n","    n, h, w, c = x.shape\n","\n","    # We can merge s2d+emb into a single conv; it's the same.\n","    x = nn.Conv(\n","        features=self.hidden_size,\n","        kernel_size=self.patch_size,\n","        strides=self.patch_size,\n","        padding='VALID',\n","        name='embedding')(x)\n","    # [n,7,7,8]\n","    # Here, x is a grid of embeddings.\n","\n","    # (Possibly partial) Transformer.\n","    if self.transformer is not None:\n","      n, h, w, c = x.shape\n","      x = jnp.reshape(x, [n, h * w, c])\n","\n","      # If we want to add a class token, add it here.\n","\n","      cls = self.param('cls', nn.initializers.zeros, (1, 1, c))\n","      cls = jnp.tile(cls, [n, 1, 1])\n","      x = jnp.concatenate([cls, x], axis=1)\n","\n","      x = self.encoder(name='Transformer', **self.transformer)(x)\n","\n","    x = x[:, 0]\n","\n","    x = Dense(features=self.representation_size, name='pre_logits')(x)\n","    x = nn.tanh(x)\n","\n","    if self.num_classes:\n","      x = Dense(\n","          features=self.num_classes,\n","          name='head',\n","          kernel_init=nn.initializers.zeros,\n","          bias_init=nn.initializers.constant(self.head_bias_init))(x)\n","    \n","    return x - logsumexp(x, axis=-1, keepdims=True)\n","```"],"metadata":{"id":"e3Ft6cv4WG2V"}},{"cell_type":"markdown","source":["## Scaled Dot Product Attention\n","$$\\text{Attention}(Q,K,V)=\\text{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V$$\n","![attention](https://uvadlc-notebooks.readthedocs.io/en/latest/_images/scaled_dot_product_attn.svg)"],"metadata":{"id":"Ws_uszsBiQkJ"}},{"cell_type":"code","source":["def scaled_dot_product(q, k, v):\n","    d_k = q.shape[-1]\n","    attn_logits = jnp.matmul(q, jnp.swapaxes(k, -2, -1))\n","    attn_logits = attn_logits / jnp.sqrt(d_k)\n","    attention = jax.nn.softmax(attn_logits, axis=-1)\n","    values = jnp.matmul(attention, v)\n","    return values, attention"],"metadata":{"id":"CT8BDT0BhJhz","executionInfo":{"status":"ok","timestamp":1660799105689,"user_tz":-540,"elapsed":546,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["prng_key, data_key, model_key = random.split(prng_key, 3)\n","\n","qkv = random.normal(data_key, (3, 5, 4))\n","\n","q, k, v = qkv\n","values, attention = scaled_dot_product(q, k, v)\n","\n","print(\"Q\\n\", q)\n","print(\"K\\n\", k)\n","print(\"V\\n\", v)\n","print(\"Values\\n\", values)\n","print(\"Attention\\n\", attention)"],"metadata":{"id":"XhnajBiJicOr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660799515949,"user_tz":-540,"elapsed":4763,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"4e1e2b93-f1b6-45d3-94e7-f5c2f09444eb"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Q\n"," [[ 0.00307487 -0.50011796 -1.501804   -1.4141661 ]\n"," [ 2.1453137  -0.4718021   0.9191343   1.7391626 ]\n"," [ 0.17041557 -0.7136079   0.8392585  -1.4214722 ]\n"," [-0.52986854  0.10165399 -0.42957404 -0.8654944 ]\n"," [ 0.89328146 -0.5134614  -1.3805393   0.6176284 ]]\n","K\n"," [[ 0.35136184  0.2277279   0.4637599  -1.6330982 ]\n"," [ 0.1662322  -1.7468684   0.20906103  0.9306843 ]\n"," [ 0.61859447  0.15028249 -1.6582465  -0.20294301]\n"," [ 0.3900604   1.2628363  -0.05066268  0.8681067 ]\n"," [-0.66075593 -0.7031607   0.47805652  0.92285985]]\n","V\n"," [[ 1.1938121  -0.4543119  -1.4905086  -0.97450143]\n"," [-0.6157323  -0.07904269 -1.4535677  -0.10164753]\n"," [ 2.1374083  -0.7173527  -0.4263354  -1.364889  ]\n"," [ 1.0278374  -1.2698627   0.41669926  0.42243966]\n"," [-0.14964713  1.010159   -1.4778241  -0.4099946 ]]\n","Values\n"," [[ 1.4277755  -0.5155352  -0.8345996  -0.9869154 ]\n"," [ 0.15472348 -0.25210273 -0.9222913  -0.15975045]\n"," [ 0.8091846  -0.2846658  -1.2848443  -0.72205937]\n"," [ 1.0321237  -0.38687354 -0.9404054  -0.71309996]\n"," [ 1.0315266  -0.44894403 -0.72278136 -0.6879368 ]]\n","Attention\n"," [[0.2818726  0.09122992 0.5146116  0.05461988 0.05766591]\n"," [0.04318304 0.4663995  0.07661538 0.24502593 0.16877623]\n"," [0.5717141  0.1653983  0.08931088 0.05400315 0.1195735 ]\n"," [0.34185073 0.11310254 0.26948765 0.13494064 0.14061844]\n"," [0.05907824 0.23761678 0.4569213  0.14229476 0.10408887]]\n"]}]},{"cell_type":"markdown","source":["## Multi-Head Attention\n","$$\\begin{split}\\begin{split}\n","    \\text{Multihead}(Q,K,V) & = \\text{Concat}(\\text{head}_1,...,\\text{head}_h)W^{O}\\\\\n","    \\text{where } \\text{head}_i & = \\text{Attention}(QW_i^Q,KW_i^K, VW_i^V)\n","\\end{split}\\end{split}$$\n","![multi-head attention](https://uvadlc-notebooks.readthedocs.io/en/latest/_images/multihead_attention.svg)"],"metadata":{"id":"FIW11NKUk0BK"}},{"cell_type":"code","source":["def dot_product_attention_weights(query: Array,\n","                                  key: Array):\n","  \"\"\"Computes dot-product attention weights given query and key.\n","  Args:\n","    query: queries for calculating attention with shape of\n","      `[batch..., q_length, num_heads, qk_depth_per_head]`.\n","    key: keys for calculating attention with shape of\n","      `[batch..., kv_length, num_heads, qk_depth_per_head]`.\n","  Returns:\n","    Output of shape `[batch..., num_heads, q_length, kv_length]`.\n","  \"\"\"\n","  dtype = query.dtype\n","  # calculate attention matrix\n","  depth = query.shape[-1]\n","  query = query / jnp.sqrt(depth)\n","  # attn weight shape is (batch..., num_heads, q_length, kv_length)\n","  attn_weights = jnp.einsum('...qhd,...khd->...hqk', query, key)\n","  # normalize the attention weights\n","  attn_weights = jax.nn.softmax(attn_weights)\n","\n","  return attn_weights"],"metadata":{"id":"WiLB7G39kDAy","executionInfo":{"status":"ok","timestamp":1660799903333,"user_tz":-540,"elapsed":554,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["qkv = random.normal(data_key, (3, 128, 50, 2, 4))\n","q, k, v = qkv\n","\n","dot_product_attention_weights(q,k).shape"],"metadata":{"id":"s4PGBQQ7MAaB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660799970897,"user_tz":-540,"elapsed":1316,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"735829ef-e1ee-470e-bfdf-d9803b11e0c8"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 2, 50, 50)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["def dot_product_attention(query: Array,\n","                          key: Array,\n","                          value: Array):\n","  \"\"\"Computes dot-product attention given query, key, and value.\n","  Args:\n","    query: queries for calculating attention with shape of\n","      `[batch..., q_length, num_heads, qk_depth_per_head]`.\n","    key: keys for calculating attention with shape of\n","      `[batch..., kv_length, num_heads, qk_depth_per_head]`.\n","    value: values to be used in attention with shape of\n","      `[batch..., kv_length, num_heads, v_depth_per_head]`.\n","  Returns:\n","    Output of shape `[batch..., q_length, num_heads, v_depth_per_head]`.\n","  \"\"\"\n","  # compute attention weights (batch..., num_heads, q_length, kv_length)\n","  attn_weights = dot_product_attention_weights(query, key)\n","\n","  # return weighted sum over values for each query position\n","  return jnp.einsum('...hqk,...khd->...qhd', attn_weights, value)\n"],"metadata":{"id":"0odsgEq1458e","executionInfo":{"status":"ok","timestamp":1660800466677,"user_tz":-540,"elapsed":782,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["dot_product_attention(q,k,v).shape"],"metadata":{"id":"TkXLv5p_MiqW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660800467390,"user_tz":-540,"elapsed":3,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"9aa2d800-3a65-4e3e-d631-f8b7dcdd1eb2"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 50, 2, 4)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["class Dense(nn.Module):\n","  features: int\n","  kernel_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.lecun_normal()\n","  bias_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.zeros\n","\n","  @nn.compact\n","  def __call__(self, x: Array) -> Array:\n","    w = self.param('kernel', self.kernel_init, (x.shape[-1], self.features))\n","    b = self.param('bias', self.bias_init, (self.features,))\n","    return jnp.einsum('...i,ij->...j', x, w) + b    "],"metadata":{"id":"rIsvavgfNWoH","executionInfo":{"status":"ok","timestamp":1660800470601,"user_tz":-540,"elapsed":2,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["x = random.normal(data_key, (128,50,16))\n","\n","model = Dense(32)\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"dVk1OfcCNYZ0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660800476010,"user_tz":-540,"elapsed":1699,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"1a9816b4-ece8-4f29-cb00-ceec115f18ef"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 50, 32)"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["class DenseMultiHead(nn.Module):\n","  num_heads: int\n","  head_dim: int\n","  kernel_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.lecun_normal()\n","  bias_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.zeros\n","  \n","  @nn.compact\n","  def __call__(self, x: Array) -> Array:\n","    w = self.param('kernel', self.kernel_init, (x.shape[-1], self.num_heads, self.head_dim))\n","    b = self.param('bias', self.bias_init, (self.num_heads, self.head_dim))\n","    return jnp.einsum('...i,ijk->...jk', x, w) + b\n","\n","\n","class DenseConcatHead(nn.Module):\n","  features: int\n","  kernel_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.lecun_normal()\n","  bias_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.zeros\n","\n","  @nn.compact\n","  def __call__(self, x: Array) -> Array:\n","    w = self.param('kernel', self.kernel_init, (x.shape[-2], x.shape[-1], self.features))\n","    b = self.param('bias', self.bias_init, (self.features,))\n","    return jnp.einsum('...ij,ijk->...k', x, w) + b"],"metadata":{"id":"6d6oW6xBM_RN","executionInfo":{"status":"ok","timestamp":1660800482764,"user_tz":-540,"elapsed":1062,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["x = random.normal(data_key, (128,50,16))\n","\n","model = DenseMultiHead(4, 4)\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"p8mUzl1qMvw-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660800485771,"user_tz":-540,"elapsed":791,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"ab1c1276-ea0d-44d1-a971-1ada316eedda"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 50, 4, 4)"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["model = DenseConcatHead(16)\n","params = model.init(model_key, y)\n","z = model.apply(params, y)\n","\n","z.shape"],"metadata":{"id":"Agfi-b1UOlqU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660800489016,"user_tz":-540,"elapsed":1049,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"4e42bb96-44c9-47d4-902c-fdff951cbe13"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 50, 16)"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["class MultiHeadDotProductAttention(nn.Module):\n","  \"\"\"Multi-head dot-product attention.\n","    Attributes:\n","      num_heads: number of attention heads. Features (i.e. inputs_q.shape[-1])\n","        should be divisible by the number of heads.\n","      kernel_init: initializer for the kernel of the Dense layers.\n","      bias_init: initializer for the bias of the Dense layers.\n","      use_bias: bool: whether pointwise QKVO dense transforms use bias.\n","      attention_fn: dot_product_attention or compatible function. Accepts\n","        query, key, value, and returns output of shape\n","        `[bs, dim1, dim2, ..., dimN,, num_heads, value_channels]``\n","  \"\"\"\n","  num_heads: int\n","  kernel_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.lecun_normal()\n","  bias_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.zeros\n","  use_bias: bool = True\n","  attention_fn: Callable[[Array, Array, Array], Array] = dot_product_attention\n","  \n","  @nn.compact\n","  def __call__(self,\n","               inputs_q: Array,\n","               inputs_k: Array,\n","               inputs_v: Array):\n","    \"\"\"Applies multi-head dot product attention on the input data.\n","    Projects the inputs into multi-headed query, key, and value vectors,\n","    applies dot-product attention and project the results to an output vector.\n","    Args:\n","      inputs_q: input queries of shape\n","        `[batch_sizes..., length, features]`.\n","      inputs_k: key of shape\n","        `[batch_sizes..., length, features]`.\n","      inputs_v: key of shape\n","        `[batch_sizes..., length, features]`.\n","    Returns:\n","      output of shape `[batch_sizes..., length, features]`.\n","    \"\"\"\n","    features = inputs_q.shape[-1]\n","    qkv_features = inputs_q.shape[-1]\n","    assert qkv_features % self.num_heads == 0, (\n","        'Memory dimension must be divisible by number of heads.')\n","    head_dim = qkv_features // self.num_heads\n","\n","    # project inputs_q to multi-headed q/k/v\n","    # dimensions are then [batch..., length, n_heads, n_features_per_head]\n","    query = DenseMultiHead(self.num_heads, head_dim, name='query')(inputs_q)\n","    key = DenseMultiHead(self.num_heads, head_dim, name='key')(inputs_k)\n","    value = DenseMultiHead(self.num_heads, head_dim, name='value')(inputs_v)\n","\n","    # apply attention\n","    x = self.attention_fn(query, key, value)\n","    # back to the original inputs dimensions\n","    out = DenseConcatHead(features=features,\n","                       kernel_init=self.kernel_init,\n","                       bias_init=self.bias_init,\n","                       name='out')(x)\n","    return out\n"],"metadata":{"id":"qNLgCxvW6L1V","executionInfo":{"status":"ok","timestamp":1660800919830,"user_tz":-540,"elapsed":576,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["model = MultiHeadDotProductAttention(4)\n","params = model.init(model_key,x,x,x)\n","y = model.apply(params,x,x,x)\n","\n","y.shape"],"metadata":{"id":"3DrkgpwNO5ly","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660800925234,"user_tz":-540,"elapsed":1060,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"9b1a1e17-2a40-4db0-9fb4-339f13b6a5b2"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 50, 16)"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["class LayerNorm(nn.Module):\n","  epsilon: float = 1e-6\n","  use_bias: bool = True\n","  use_scale: bool = True\n","  bias_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.zeros\n","  scale_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.ones\n","  \n","  @nn.compact\n","  def __call__(self, x):\n","    mean = jnp.mean(x, axis=-1, keepdims=True)\n","    mean2 = jnp.mean(x**2, axis=-1, keepdims=True)\n","    var = jnp.maximum(0., mean2 - mean**2)\n","    \n","    y = x - mean\n","    mul = jax.lax.rsqrt(var + self.epsilon)\n","    scale = self.param('scale', self.scale_init, (x.shape[-1],))\n","    bias = self.param('bias', self.bias_init, (x.shape[-1],))\n","    return y*mul*scale+bias"],"metadata":{"id":"hQwfnu83M3h4","executionInfo":{"status":"ok","timestamp":1660800927986,"user_tz":-540,"elapsed":10,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["model = LayerNorm()\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"qWh67RYoPeOU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660800931511,"user_tz":-540,"elapsed":528,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"2133f27d-baff-496c-d7ad-85744877745f"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(128, 50, 16)"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["class AddPositionEmbs(nn.Module):\n","  posemb_init: Callable[[PRNGKey, Shape, Dtype], Array] = nn.initializers.normal(stddev=0.02)\n","\n","  @nn.compact\n","  def __call__(self, inputs):\n","    # inputs.shape is (batch_size, seq_len, emb_dim).\n","    pos_emb_shape = (1, inputs.shape[1], inputs.shape[2])\n","    pe = self.param('pos_embedding', self.posemb_init, pos_emb_shape)\n","    return inputs + pe"],"metadata":{"id":"R4aWHBb6VYTo","executionInfo":{"status":"ok","timestamp":1660800933617,"user_tz":-540,"elapsed":2,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["model = AddPositionEmbs()\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"TR72J-DvPzRq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class MlpBlock(nn.Module):\n","  mlp_dim: int\n","  out_dim: Optional[int] = None\n","  kernel_init: Callable[[PRNGKey, Shape, Dtype],\n","                        Array] = nn.initializers.xavier_uniform()\n","  bias_init: Callable[[PRNGKey, Shape, Dtype],\n","                      Array] = nn.initializers.normal(stddev=1e-6)\n","\n","  @nn.compact\n","  def __call__(self, x):\n","\n","    actual_out_dim = x.shape[-1] if self.out_dim is None else self.out_dim\n","    x = Dense(features=self.mlp_dim,\n","              kernel_init=self.kernel_init,\n","              bias_init=self.bias_init)(x)\n","    x = nn.gelu(x)\n","    x = Dense(features=actual_out_dim,\n","              kernel_init=self.kernel_init,\n","              bias_init=self.bias_init)(x)\n","    return x"],"metadata":{"id":"Rl3fs0EXZgOH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = MlpBlock(512)\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"ws2Zv0JSQJEx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Encoder1DBlock(nn.Module):\n","  mlp_dim: int\n","  num_heads: int\n","\n","  @nn.compact\n","  def __call__(self, inputs):\n","    \"\"\"Applies Encoder1DBlock module.\n","    Args:\n","      inputs: Inputs to the layer.\n","    Returns:\n","      output after transformer encoder block.\n","    \"\"\"\n","\n","    # Attention block.\n","    assert inputs.ndim == 3, f'Expected (batch, seq, hidden) got {inputs.shape}'\n","    x = nn.LayerNorm()(inputs)\n","    x = nn.MultiHeadDotProductAttention(\n","        kernel_init=nn.initializers.xavier_uniform(),\n","        num_heads=self.num_heads)(x, x)\n","    x = x + inputs\n","\n","    # MLP block.\n","    y = nn.LayerNorm()(x)\n","    y = MlpBlock(mlp_dim=self.mlp_dim)(y)\n","\n","    return x + y"],"metadata":{"id":"IOm3DHiWY41i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Encoder1DBlock(512, 4)\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"u1bdpTgYRWyD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Encoder(nn.Module):\n","  num_layers: int\n","  mlp_dim: int\n","  num_heads: int\n","  add_position_embedding: bool = True\n","\n","  @nn.compact\n","  def __call__(self, x):\n","    \"\"\"Applies Transformer model on the inputs.\n","    Args:\n","      x: Inputs to the layer.\n","    Returns:\n","      output of a transformer encoder.\n","    \"\"\"\n","    assert x.ndim == 3  # (batch, len, emb)\n","\n","    if self.add_position_embedding:\n","      x = AddPositionEmbs(\n","          posemb_init=nn.initializers.normal(stddev=0.02),  # from BERT.\n","          name='posembed_input')(x)\n","\n","    # Input Encoder\n","    for lyr in range(self.num_layers):\n","      x = Encoder1DBlock(\n","          mlp_dim=self.mlp_dim,\n","          name=f'encoderblock_{lyr}',\n","          num_heads=self.num_heads)(x)\n","    encoded = nn.LayerNorm(name='encoder_norm')(x)\n","\n","    return encoded"],"metadata":{"id":"DigOdv8CeWDl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Encoder(7, 512, 4)\n","params = model.init(model_key, x)\n","y = model.apply(params, x)\n","\n","y.shape"],"metadata":{"id":"srZmuVu6RmGz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from jax.scipy.special import logsumexp\n","\n","class MyViT(nn.Module):\n","  \"\"\"VisionTransformer.\"\"\"\n","\n","  num_classes: int\n","  transformer: Any\n","  patch_size: Any = (4,4)\n","  hidden_size: int = 8\n","  representation_size: Optional[int] = 512\n","  head_bias_init: float = 0.\n","  encoder: Type[nn.Module] = Encoder\n","  model_name: Optional[str] = None\n","\n","  @nn.compact\n","  def __call__(self, x):\n","\n","    n, h, w, c = x.shape\n","\n","    # We can merge s2d+emb into a single conv; it's the same.\n","    x = nn.Conv(\n","        features=self.hidden_size,\n","        kernel_size=self.patch_size,\n","        strides=self.patch_size,\n","        padding='VALID',\n","        name='embedding')(x)\n","    # [n,7,7,8]\n","    # Here, x is a grid of embeddings.\n","\n","    # (Possibly partial) Transformer.\n","    if self.transformer is not None:\n","      n, h, w, c = x.shape\n","      x = jnp.reshape(x, [n, h * w, c])\n","\n","      # If we want to add a class token, add it here.\n","\n","      cls = self.param('cls', nn.initializers.zeros, (1, 1, c))\n","      cls = jnp.tile(cls, [n, 1, 1])\n","      x = jnp.concatenate([cls, x], axis=1)\n","\n","      x = self.encoder(name='Transformer', **self.transformer)(x)\n","\n","    x = x[:, 0]\n","\n","    x = Dense(features=self.representation_size, name='pre_logits')(x)\n","    x = nn.tanh(x)\n","\n","    if self.num_classes:\n","      x = Dense(\n","          features=self.num_classes,\n","          name='head',\n","          kernel_init=nn.initializers.zeros,\n","          bias_init=nn.initializers.constant(self.head_bias_init))(x)\n","    \n","    return x - logsumexp(x, axis=-1, keepdims=True)"],"metadata":{"id":"QpzDDyONfQ5x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = MyViT(10, {'num_layers':3, 'mlp_dim':128, 'num_heads':4}, (4,4), 16, 128)\n","params = model.init(prng_key, train_data[:batch_size])\n","y = model.apply(params, train_data[:batch_size])\n","\n","y.shape"],"metadata":{"id":"olriqUigEtGe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["@jit\n","def loss_fn(params, images, targets):\n","  preds = model.apply(params, images)\n","  return -jnp.mean(targets * preds)\n","\n","@jit\n","def accuracy(params, images, targets):\n","  target_class = jnp.argmax(targets, axis=1)\n","  predicted_class = jnp.argmax(model.apply(params, images), axis=1)\n","  return jnp.mean(predicted_class == target_class)\n","\n","@jit\n","def step(params, opt_state, x, y):\n","    loss_value, grads = jax.value_and_grad(loss_fn)(params, x, y)\n","    updates, opt_state = optimizer.update(grads, opt_state, params)\n","    params = optax.apply_updates(params, updates)\n","    return params, opt_state, loss_value\n","\n","train_loss = loss_fn(params, train_data, train_targets)\n","train_acc = accuracy(params, train_data, train_targets)\n","test_acc = accuracy(params, test_data, test_targets)\n","print(f\"Loss {train_loss}\")\n","print(f\"Training set accuracy {train_acc}\")\n","print(f\"Test set accuracy {test_acc}\")"],"metadata":{"id":"JJmOTHproY8G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["optimizer = optax.adam(learning_rate=0.01)\n","opt_state = optimizer.init(params)\n","\n","for epoch in range(num_epochs):\n","  start_time = time.time()\n","  for x, y in train_loader:\n","    y = jax.nn.one_hot(y, 10)\n","    params, opt_state, loss_value = step(params, opt_state, x[...,np.newaxis], y)\n","  epoch_time = time.time() - start_time\n","\n","  train_loss = loss_fn(params, train_data, train_targets)\n","  train_acc = accuracy(params, train_data, train_targets)\n","  test_acc = accuracy(params, test_data, test_targets)\n","  print(f\"Epoch {epoch} in {epoch_time:0.2f} sec, loss {train_loss:.4f}\")\n","  print(f\"\\tTraining set accuracy {train_acc:.4f}\")\n","  print(f\"\\tTest set accuracy {test_acc:.4f}\")"],"metadata":{"id":"wB6g-xxxwHwx"},"execution_count":null,"outputs":[]}]}