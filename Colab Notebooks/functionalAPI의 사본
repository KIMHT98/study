{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ynz0DI-yx4CMbkygu69FR3W4QqA5Cucb","timestamp":1672157149082}],"authorship_tag":"ABX9TyN6qF/fJCx3aJMeU/9UVIn5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","source":["import tensorflow as tf\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","\n","model = Sequential()\n","\n","model.add(Dense(8, activation='relu', input_shape=(4,)))\n","model.add(Dense(16, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","\n","model.add(Dense(10, activation='softmax'))\n","\n","model.summary()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tFp-HK49UWdF","executionInfo":{"status":"ok","timestamp":1672375039793,"user_tz":-540,"elapsed":5621,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"7653f3b1-baae-44ad-b397-66d0e2b51d2a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 8)                 40        \n","                                                                 \n"," dense_1 (Dense)             (None, 16)                144       \n","                                                                 \n"," dense_2 (Dense)             (None, 32)                544       \n","                                                                 \n"," dense_3 (Dense)             (None, 10)                330       \n","                                                                 \n","=================================================================\n","Total params: 1,058\n","Trainable params: 1,058\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","from tensorflow.keras.layers import Input, Dense\n","from tensorflow.keras.models import Model\n","\n","input_ = Input(shape=(4,))\n","\n","x = Dense(8, activation='relu')(input_)\n","x = Dense(16, activation='relu')(x)\n","x = Dense(32, activation='relu')(x)\n","\n","output_ = Dense(10, activation='softmax')(x)\n","\n","model = Model(inputs=input_,  outputs=output_)\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FpMXK41xUpa2","executionInfo":{"status":"ok","timestamp":1672375085605,"user_tz":-540,"elapsed":5,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"e983f88b-3e7f-404e-b3e3-959d1bc084bc"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_3 (InputLayer)        [(None, 4)]               0         \n","                                                                 \n"," dense_8 (Dense)             (None, 8)                 40        \n","                                                                 \n"," dense_9 (Dense)             (None, 16)                144       \n","                                                                 \n"," dense_10 (Dense)            (None, 32)                544       \n","                                                                 \n"," dense_11 (Dense)            (None, 10)                330       \n","                                                                 \n","=================================================================\n","Total params: 1,058\n","Trainable params: 1,058\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"gpoh-0ZfFlGa","executionInfo":{"status":"ok","timestamp":1672375065800,"user_tz":-540,"elapsed":475,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"outputs":[],"source":["from tensorflow.keras.layers import Input, Dense, concatenate\n","from tensorflow.keras.models import Model"]},{"cell_type":"code","source":["input_1 = Input(shape=(4,)) #입력층1 에 대한 신경망\n","\n","hidden_1 = Dense(8, activation = 'relu')(input_1)\n","hidden_2 = Dense(16, activation = 'relu')(hidden_1)\n","\n","output_1= Model(inputs = input_1, outputs = hidden_2)\n","\n","input_2 = Input(shape=(8,)) #입력층2 에 대한 신경망    \n","\n","hidden_3 = Dense(8, activation='relu')(input_2)\n","\n","output_2 = Model(inputs=input_2,  outputs=hidden_3)\n","\n","# 층 연결\n","result = concatenate([output_1.output, output_2.output])\n","\n","# 출력층 정의\n","output_ = Dense(10, activation='softmax')(result)\n","\n","# 최종 모델 구축\n","model = Model(inputs=[output_1.input, output_2.input],  outputs=output_)\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PUcQKeKoGKjn","executionInfo":{"status":"ok","timestamp":1672375065800,"user_tz":-540,"elapsed":10,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"0459e788-4800-482b-e7f1-7488a2c86e1e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_2\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 4)]          0           []                               \n","                                                                                                  \n"," dense_4 (Dense)                (None, 8)            40          ['input_1[0][0]']                \n","                                                                                                  \n"," input_2 (InputLayer)           [(None, 8)]          0           []                               \n","                                                                                                  \n"," dense_5 (Dense)                (None, 16)           144         ['dense_4[0][0]']                \n","                                                                                                  \n"," dense_6 (Dense)                (None, 8)            72          ['input_2[0][0]']                \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 24)           0           ['dense_5[0][0]',                \n","                                                                  'dense_6[0][0]']                \n","                                                                                                  \n"," dense_7 (Dense)                (None, 10)           250         ['concatenate[0][0]']            \n","                                                                                                  \n","==================================================================================================\n","Total params: 506\n","Trainable params: 506\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.layers import Input, Conv2D, MaxPool2D\n","from tensorflow.keras.layers import Flatten, Dense, Dropout\n","from tensorflow.keras.models import Model\n","\n","(x_train, y_train),(x_test, y_test) = mnist.load_data()\n","\n","x_train=x_train.reshape(-1, 28, 28, 1)\n","x_test=x_test.reshape(-1, 28, 28, 1)\n","\n","print(x_train.shape, x_test.shape)\n","print(y_train.shape, y_test.shape)\n","\n","x_train = x_train / 255.0\n","x_test = x_test / 255.0"],"metadata":{"id":"buG8JV3tGt7s","executionInfo":{"status":"ok","timestamp":1672375199053,"user_tz":-540,"elapsed":2670,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"304a0fc2-2120-4f48-c55f-8d3622c71362"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 2s 0us/step\n","(60000, 28, 28, 1) (10000, 28, 28, 1)\n","(60000,) (10000,)\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"UCHYaayClQQ2"}},{"cell_type":"code","source":["input_ = Input(shape=(28,28,1))\n","\n","x = Conv2D(32, 3, activation='relu')(input_)\n","x = Conv2D(64, 3, activation='relu')(x)\n","x = MaxPool2D(pool_size=(2,2))(x)\n","x = Dropout(0.25)(x)\n","\n","x = Flatten()(x)\n","\n","x = Dense(128, activation='relu')(x)\n","x = Dropout(0.5)(x)\n","\n","output_ = Dense(10, activation='softmax')(x)\n","\n","cnn = Model(inputs=input_,  outputs=output_)"],"metadata":{"id":"_MDYNEDeVFNS","executionInfo":{"status":"ok","timestamp":1672375208059,"user_tz":-540,"elapsed":1027,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["cnn.compile(loss='sparse_categorical_crossentropy',\n","            optimizer=tf.keras.optimizers.Adam(), metrics=['accuracy'])\n","\n","cnn.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v2NnY7FyVHwR","executionInfo":{"status":"ok","timestamp":1672375220579,"user_tz":-540,"elapsed":13,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"34142b5a-2897-49b8-8ecf-5ecd960a4995"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_4 (InputLayer)        [(None, 28, 28, 1)]       0         \n","                                                                 \n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 24, 24, 64)        18496     \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 12, 12, 64)       0         \n"," )                                                               \n","                                                                 \n"," dropout (Dropout)           (None, 12, 12, 64)        0         \n","                                                                 \n"," flatten (Flatten)           (None, 9216)              0         \n","                                                                 \n"," dense_12 (Dense)            (None, 128)               1179776   \n","                                                                 \n"," dropout_1 (Dropout)         (None, 128)               0         \n","                                                                 \n"," dense_13 (Dense)            (None, 10)                1290      \n","                                                                 \n","=================================================================\n","Total params: 1,199,882\n","Trainable params: 1,199,882\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["hist = cnn.fit(x_train, y_train, batch_size=128, \n","               epochs=30, validation_data=(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wumpFoaoVK7q","executionInfo":{"status":"ok","timestamp":1672375382483,"user_tz":-540,"elapsed":144115,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"cab4df99-705e-404d-a8cb-134887d6d310"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","469/469 [==============================] - 14s 10ms/step - loss: 0.2519 - accuracy: 0.9249 - val_loss: 0.0497 - val_accuracy: 0.9844\n","Epoch 2/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0868 - accuracy: 0.9745 - val_loss: 0.0376 - val_accuracy: 0.9871\n","Epoch 3/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0673 - accuracy: 0.9803 - val_loss: 0.0357 - val_accuracy: 0.9888\n","Epoch 4/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0509 - accuracy: 0.9839 - val_loss: 0.0320 - val_accuracy: 0.9893\n","Epoch 5/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0457 - accuracy: 0.9863 - val_loss: 0.0263 - val_accuracy: 0.9911\n","Epoch 6/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0375 - accuracy: 0.9882 - val_loss: 0.0325 - val_accuracy: 0.9898\n","Epoch 7/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0373 - accuracy: 0.9882 - val_loss: 0.0263 - val_accuracy: 0.9919\n","Epoch 8/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0304 - accuracy: 0.9900 - val_loss: 0.0273 - val_accuracy: 0.9920\n","Epoch 9/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0282 - accuracy: 0.9911 - val_loss: 0.0286 - val_accuracy: 0.9923\n","Epoch 10/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0264 - accuracy: 0.9917 - val_loss: 0.0286 - val_accuracy: 0.9917\n","Epoch 11/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0269 - accuracy: 0.9913 - val_loss: 0.0255 - val_accuracy: 0.9930\n","Epoch 12/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0224 - accuracy: 0.9928 - val_loss: 0.0249 - val_accuracy: 0.9925\n","Epoch 13/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0192 - accuracy: 0.9940 - val_loss: 0.0248 - val_accuracy: 0.9931\n","Epoch 14/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0196 - accuracy: 0.9934 - val_loss: 0.0266 - val_accuracy: 0.9930\n","Epoch 15/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0182 - accuracy: 0.9938 - val_loss: 0.0248 - val_accuracy: 0.9938\n","Epoch 16/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0165 - accuracy: 0.9944 - val_loss: 0.0254 - val_accuracy: 0.9940\n","Epoch 17/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0170 - accuracy: 0.9942 - val_loss: 0.0291 - val_accuracy: 0.9931\n","Epoch 18/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0153 - accuracy: 0.9948 - val_loss: 0.0273 - val_accuracy: 0.9941\n","Epoch 19/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0154 - accuracy: 0.9946 - val_loss: 0.0311 - val_accuracy: 0.9935\n","Epoch 20/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0145 - accuracy: 0.9950 - val_loss: 0.0281 - val_accuracy: 0.9927\n","Epoch 21/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0142 - accuracy: 0.9952 - val_loss: 0.0271 - val_accuracy: 0.9937\n","Epoch 22/30\n","469/469 [==============================] - 6s 14ms/step - loss: 0.0120 - accuracy: 0.9956 - val_loss: 0.0319 - val_accuracy: 0.9925\n","Epoch 23/30\n","469/469 [==============================] - 7s 16ms/step - loss: 0.0136 - accuracy: 0.9954 - val_loss: 0.0288 - val_accuracy: 0.9929\n","Epoch 24/30\n","469/469 [==============================] - 6s 13ms/step - loss: 0.0119 - accuracy: 0.9961 - val_loss: 0.0316 - val_accuracy: 0.9930\n","Epoch 25/30\n","469/469 [==============================] - 5s 10ms/step - loss: 0.0117 - accuracy: 0.9961 - val_loss: 0.0310 - val_accuracy: 0.9936\n","Epoch 26/30\n","469/469 [==============================] - 5s 10ms/step - loss: 0.0103 - accuracy: 0.9965 - val_loss: 0.0393 - val_accuracy: 0.9927\n","Epoch 27/30\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0125 - accuracy: 0.9957 - val_loss: 0.0262 - val_accuracy: 0.9940\n","Epoch 28/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0109 - accuracy: 0.9962 - val_loss: 0.0283 - val_accuracy: 0.9937\n","Epoch 29/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0091 - accuracy: 0.9968 - val_loss: 0.0322 - val_accuracy: 0.9929\n","Epoch 30/30\n","469/469 [==============================] - 4s 9ms/step - loss: 0.0103 - accuracy: 0.9966 - val_loss: 0.0291 - val_accuracy: 0.9942\n"]}]},{"cell_type":"code","source":["cnn.evaluate(x_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tv0o_QAvVPbK","executionInfo":{"status":"ok","timestamp":1672375402259,"user_tz":-540,"elapsed":1438,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"3742fa46-4e87-4eb6-e210-11b06f7a8010"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.0291 - accuracy: 0.9942\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.029137905687093735, 0.9941999912261963]"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.plot(hist.history['accuracy'])\n","plt.plot(hist.history['val_accuracy'])\n","plt.title('Accuracy Trend')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train','validation'], loc='best')\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"qz7ZRCqPVmII","executionInfo":{"status":"ok","timestamp":1672375404912,"user_tz":-540,"elapsed":1104,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"d3fcad29-a5b4-486c-a2c6-c95115ca2924"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.plot(hist.history['loss'])\n","plt.plot(hist.history['val_loss'])\n","plt.title('Loss Trend')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train','validation'], loc='best')\n","plt.grid()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"9sfJDPqIVoUP","executionInfo":{"status":"ok","timestamp":1672375408396,"user_tz":-540,"elapsed":1152,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"6c0a2f2f-8d64-4a0f-f829-b00d93f9859b"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"oqy6EeUgV4x_"},"execution_count":null,"outputs":[]}]}