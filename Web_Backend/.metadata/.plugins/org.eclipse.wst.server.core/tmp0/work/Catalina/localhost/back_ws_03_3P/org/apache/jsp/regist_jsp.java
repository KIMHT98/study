/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-03-07 09:02:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.ssafy.ws.step3.dto.User;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/header.jsp", Long.valueOf(1709802159372L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("com.ssafy.ws.step3.dto.User");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>도서 정보 사이트</title>\r\n");
      out.write("<style>\r\n");
      out.write("label {\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	width: 80px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("h1 {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#user-info {\r\n");
      out.write("	text-align: right;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("	// request 영역에 msg라는 이름의 attribute가 있다면 화면에 alert으로 출력한다.\r\n");
      out.write("	let msg = \"");
      out.print(request.getAttribute("msg")==null?"":request.getAttribute("msg"));
      out.write("\";\r\n");
      out.write("	if (msg) {\r\n");
      out.write("		alert(msg)\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>SSAFY 도서 관리</h1>\r\n");
      out.write("	<div id=\"user-info\">\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		");

		// session에서 user 객체 가져오기
		Object userObj = session.getAttribute("loginUser");
		// null 인지 검사후 User 로 타입 변환
		User user = userObj == null ? null : (User) userObj;
		// 로그인 정보가 없을 경우는 로그인을 위한 폼을 제공한다.
		if (userObj == null) {
		
      out.write("\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<form method=\"post\" action=\"main\">\r\n");
      out.write("			<input type=\"hidden\" name=\"action\" value=\"login\"> <input\r\n");
      out.write("				type=\"text\" name=\"userid\" placeholder=\"아이디\"> <input\r\n");
      out.write("				type=\"password\" name=\"userpass\" placeholder=\"비밀번호\"> <input\r\n");
      out.write("				type=\"submit\" value=\"로그인\">\r\n");
      out.write("		</form>\r\n");
      out.write("		");

		}
		// 로그인 정보가 있는 경우는 사용자 이름과 로그아웃을 위한 링크를 생성한다.
		else {
		
      out.write("\r\n");
      out.write("		<div>\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("			");
      out.print(user.getName());
      out.write("\r\n");
      out.write("			님 반갑습니다. <a href=\"main?action=logout\">로그아웃</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		");

		}
		
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("<form action = \"main\" method = \"POST\">\r\n");
      out.write("<fieldset>\r\n");
      out.write("<legend>도서 등록</legend>\r\n");
      out.write("<input type = \"hidden\" name = \"action\" value = \"regist\">\r\n");
      out.write("<label for = \"isbn\">도서 번호</label>\r\n");
      out.write("<input type = \"text\" name = \"isbn\" id = \"isbn\"><br>\r\n");
      out.write("<label for = \"title\">도서명</label>\r\n");
      out.write("<input type = \"text\" name = \"title\" id = \"title\"><br>\r\n");
      out.write("<label for = \"author\">저자명</label>\r\n");
      out.write("<input type = \"text\" name = \"author\" id = \"author\"><br>\r\n");
      out.write("<label for = \"price\">가격</label>\r\n");
      out.write("<input type = \"text\" name = \"price\" id = \"price\"><br>\r\n");
      out.write("<label for = \"desc\">설명</label><br>\r\n");
      out.write("<textarea name = \"desc\" id = \"desc\" rows = \"5\" cols = \"70\"></textarea><br>\r\n");
      out.write("<input type = \"submit\" value = \"등록\">\r\n");
      out.write("<input type = \"reset\" value = \"초기화\">\r\n");
      out.write("\r\n");
      out.write("</fieldset>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
