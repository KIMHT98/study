{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1ZmpPSsonwHTWgqgLuLyjNYS7CGrbNgEW","authorship_tag":"ABX9TyPoEE447gRiTe/Tw8plyhst"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y5vyRhiK_ZuR","executionInfo":{"status":"ok","timestamp":1692437447476,"user_tz":-540,"elapsed":13018,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"2110280d-8808-4d84-be9c-de9fda6e8e30"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["## 기본 데이터로 간단하게 회귀분석 해보기\n","- 수치 데이터인 ['Dining_Rating','Delivery_Rating','Dining Votes','Votes'] 컬럼들을 입력 데이터로 사용\n","- Prices컬럼을 예측하는 것이 목표\n","- 결측값은 모두 삭제하고, 간단하게 표준화로 스케일링 진해"],"metadata":{"id":"TSQe_KfLI0RJ"}},{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('/content/drive/MyDrive/BDA_CSV/zomato_dataset.csv')"],"metadata":{"id":"4ZNsEXxJ_wvH","executionInfo":{"status":"ok","timestamp":1692437449472,"user_tz":-540,"elapsed":1999,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["df.dropna(inplace = True) #결측값 삭제하기"],"metadata":{"id":"r1edHe20ALGR","executionInfo":{"status":"ok","timestamp":1692437611404,"user_tz":-540,"elapsed":4,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["feature_cols = ['Dining_Rating','Delivery_Rating','Dining Votes','Votes'] #입력 데이터들 지정\n","label = df.pop('Prices') #우리의 타겟데이터\n","feature = df[feature_cols].copy()"],"metadata":{"id":"VdT4VvBgJIih","executionInfo":{"status":"ok","timestamp":1692437709172,"user_tz":-540,"elapsed":321,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["#데이터셋 분할\n","from sklearn.model_selection import train_test_split\n","train_x, test_x, train_y, test_y = train_test_split(feature, label, test_size = 0.2, random_state = 100)\n","#테스트 데이터로 20퍼센트 사용"],"metadata":{"id":"Sa9Q3AZsJgvZ","executionInfo":{"status":"ok","timestamp":1692437797505,"user_tz":-540,"elapsed":302,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["#표준화 스케일링 진행\n","from sklearn.preprocessing import StandardScaler\n","import numpy as np\n","\n","scaler =StandardScaler()\n","train_x_sc =scaler.fit_transform(train_x)\n","test_x_sc = scaler.transform(test_x)\n","#np.reshape 조정하기\n","\n","train_y =np.array(train_y)\n","train_y =train_y.reshape(-1,1)\n","test_y = np.array(test_y)\n","test_y = test_y.reshape(-1,1)\n","\n","train_y_sc = scaler.fit_transform(train_y)\n","test_y_sc = scaler.transform(test_y)"],"metadata":{"id":"9gbt0kLMJgtU","executionInfo":{"status":"ok","timestamp":1692437844511,"user_tz":-540,"elapsed":307,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["- 기본 데이터로 간단한 전처리 완료\n","- 딥러닝을 이용하여 회귀분석을 해본다."],"metadata":{"id":"T8J3fpeLKD3E"}},{"cell_type":"markdown","source":["## 베이스모델로 간단한 딥러닝"],"metadata":{"id":"fXds7a5rD3kI"}},{"cell_type":"code","source":["import tensorflow as tf"],"metadata":{"id":"E7CWktFzAPyY","executionInfo":{"status":"ok","timestamp":1692437889838,"user_tz":-540,"elapsed":2433,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","\n","model = Sequential([\n","    Dense(units = 32, activation = 'relu', input_shape = [4]),\n","    Dense(units = 16, activation = 'relu',),\n","    Dense(units = 1)\n","]) #모델은 입력층에 32개의 노드와 두번째 층에 16개의 노드, 마지막 출력층에 1개의 노드로 구성\n","\n","model.compile(loss = 'mae',\n","              optimizer = 'adam',\n","              metrics = ['mae','mse']) #손실함수로 mae(mean_absolute_error)를 이용하고 최적화로 adam 사용"],"metadata":{"id":"u2a-PIAKD7QM","executionInfo":{"status":"ok","timestamp":1692437892945,"user_tz":-540,"elapsed":628,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"id":"Z10GnrbLEgWH","executionInfo":{"status":"ok","timestamp":1691933099561,"user_tz":-540,"elapsed":7,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"40cbf661-ed22-4b4d-a613-fd19f005709e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 32)                160       \n","                                                                 \n"," dense_1 (Dense)             (None, 16)                528       \n","                                                                 \n"," dense_2 (Dense)             (None, 1)                 17        \n","                                                                 \n","=================================================================\n","Total params: 705\n","Trainable params: 705\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model.fit(train_x_sc, train_y_sc, epochs = 50)"],"metadata":{"id":"trNXNPLKEkQN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1692438162888,"user_tz":-540,"elapsed":33417,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"81e3425b-94dc-436a-c4ce-46c141214fbb"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","506/506 [==============================] - 2s 1ms/step - loss: 0.5695 - mae: 0.5695 - mse: 0.9913\n","Epoch 2/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5573 - mae: 0.5573 - mse: 0.9703\n","Epoch 3/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5542 - mae: 0.5542 - mse: 0.9613\n","Epoch 4/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5512 - mae: 0.5512 - mse: 0.9549\n","Epoch 5/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5483 - mae: 0.5483 - mse: 0.9497\n","Epoch 6/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5465 - mae: 0.5465 - mse: 0.9459\n","Epoch 7/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5448 - mae: 0.5448 - mse: 0.9425\n","Epoch 8/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5431 - mae: 0.5431 - mse: 0.9393\n","Epoch 9/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5413 - mae: 0.5413 - mse: 0.9361\n","Epoch 10/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5406 - mae: 0.5406 - mse: 0.9344\n","Epoch 11/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5382 - mae: 0.5382 - mse: 0.9289\n","Epoch 12/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5364 - mae: 0.5364 - mse: 0.9280\n","Epoch 13/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5345 - mae: 0.5345 - mse: 0.9248\n","Epoch 14/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5334 - mae: 0.5334 - mse: 0.9215\n","Epoch 15/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5323 - mae: 0.5323 - mse: 0.9206\n","Epoch 16/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5302 - mae: 0.5302 - mse: 0.9212\n","Epoch 17/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5293 - mae: 0.5293 - mse: 0.9175\n","Epoch 18/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5281 - mae: 0.5281 - mse: 0.9124\n","Epoch 19/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5277 - mae: 0.5277 - mse: 0.9154\n","Epoch 20/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5258 - mae: 0.5258 - mse: 0.9119\n","Epoch 21/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5246 - mae: 0.5246 - mse: 0.9095\n","Epoch 22/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5249 - mae: 0.5249 - mse: 0.9112\n","Epoch 23/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5236 - mae: 0.5236 - mse: 0.9095\n","Epoch 24/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5229 - mae: 0.5229 - mse: 0.9055\n","Epoch 25/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5221 - mae: 0.5221 - mse: 0.9060\n","Epoch 26/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5209 - mae: 0.5209 - mse: 0.9015\n","Epoch 27/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5198 - mae: 0.5198 - mse: 0.9027\n","Epoch 28/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5196 - mae: 0.5196 - mse: 0.8993\n","Epoch 29/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5179 - mae: 0.5179 - mse: 0.9014\n","Epoch 30/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5175 - mae: 0.5175 - mse: 0.8975\n","Epoch 31/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5177 - mae: 0.5177 - mse: 0.8969\n","Epoch 32/50\n","506/506 [==============================] - 1s 2ms/step - loss: 0.5164 - mae: 0.5164 - mse: 0.8967\n","Epoch 33/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5156 - mae: 0.5156 - mse: 0.8965\n","Epoch 34/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5152 - mae: 0.5152 - mse: 0.8935\n","Epoch 35/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5147 - mae: 0.5147 - mse: 0.8927\n","Epoch 36/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5134 - mae: 0.5134 - mse: 0.8910\n","Epoch 37/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5130 - mae: 0.5130 - mse: 0.8927\n","Epoch 38/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5123 - mae: 0.5123 - mse: 0.8884\n","Epoch 39/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5114 - mae: 0.5114 - mse: 0.8903\n","Epoch 40/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5116 - mae: 0.5116 - mse: 0.8897\n","Epoch 41/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5103 - mae: 0.5103 - mse: 0.8885\n","Epoch 42/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5100 - mae: 0.5100 - mse: 0.8854\n","Epoch 43/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5095 - mae: 0.5095 - mse: 0.8874\n","Epoch 44/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5097 - mae: 0.5097 - mse: 0.8860\n","Epoch 45/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5082 - mae: 0.5082 - mse: 0.8861\n","Epoch 46/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5074 - mae: 0.5074 - mse: 0.8839\n","Epoch 47/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5081 - mae: 0.5081 - mse: 0.8842\n","Epoch 48/50\n","506/506 [==============================] - 1s 1ms/step - loss: 0.5072 - mae: 0.5072 - mse: 0.8789\n","Epoch 49/50\n","506/506 [==============================] - 1s 2ms/step - loss: 0.5076 - mae: 0.5076 - mse: 0.8814\n","Epoch 50/50\n","506/506 [==============================] - 1s 2ms/step - loss: 0.5063 - mae: 0.5063 - mse: 0.8806\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x795194789210>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["#딥러닝이 아닌 회귀 모델 적용\n","import numpy as np\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","lr = LinearRegression()\n","lr.fit(train_x_sc,train_y_sc)\n","y_preds = lr.predict(test_x_sc)\n","mse = mean_squared_error(test_y_sc, y_preds)\n","rmse = np.sqrt(mse)\n","\n","print(mse, rmse)\n","print(r2_score(test_y_sc, y_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CiwemMbeLGg1","executionInfo":{"status":"ok","timestamp":1692438508426,"user_tz":-540,"elapsed":310,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"5e506129-cccb-4ba8-abaf-a347e379c068"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8178756213049376 0.9043647612025457\n","0.021328925169763924\n"]}]},{"cell_type":"markdown","source":["- 그냥 일반 모델로 돌린 경우 mse : 0.82\n","- 딥러닝의 경우 mse : 0.88이지만 epoch이 증가하면 더 감소될 예정"],"metadata":{"id":"bEeHmeELMnH9"}},{"cell_type":"markdown","source":["## 내가 직접 전처리한 데이터로 모델 돌려보기"],"metadata":{"id":"iIlJ-N2oNLDQ"}},{"cell_type":"code","source":["df = pd.read_csv('/content/drive/MyDrive/BDA_CSV/df.csv')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"bYcezATsMbFm","executionInfo":{"status":"ok","timestamp":1692438716929,"user_tz":-540,"elapsed":658,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"ebe82706-3342-4050-a0f7-b5449f6a4998"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Dining_Rating_total  Delivery_Rating_total  Negative  \\\n","0                     152.1                    0.0       0.0   \n","1                     152.1                    0.0       0.0   \n","2                     152.1                    0.0       0.0   \n","3                     152.1                    0.0       0.0   \n","4                     152.1                    0.0       0.0   \n","...                     ...                    ...       ...   \n","121306                 50.7                 2196.6       0.0   \n","121307                 50.7                 2196.6       0.0   \n","121308                 50.7                 2196.6       0.0   \n","121309                 50.7                 2196.6       0.0   \n","121310                 50.7                 2196.6       0.0   \n","\n","        City_Frequency_Encoded  Place_Name_Frequency_Encoded  Cuisine_num  \\\n","0                        15299                          1465           12   \n","1                        15299                          1465           12   \n","2                        15299                          1465           12   \n","3                        15299                          1465           12   \n","4                        15299                          1465           12   \n","...                        ...                           ...          ...   \n","121306                    7480                           384           31   \n","121307                    7480                           384           31   \n","121308                    7480                           384           31   \n","121309                    7480                           384           31   \n","121310                    7480                           384           31   \n","\n","        Item_Name_num  Prices  \n","0               41026   249.0  \n","1               12100   129.0  \n","2               12685   189.0  \n","3                9157   189.0  \n","4               46356   205.0  \n","...               ...     ...  \n","121306          33338   525.0  \n","121307          33295   525.0  \n","121308          33247   525.0  \n","121309          33258   525.0  \n","121310          23237   595.0  \n","\n","[121311 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-65afa041-fb9d-4d5e-a01a-65bd1467d01e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Dining_Rating_total</th>\n","      <th>Delivery_Rating_total</th>\n","      <th>Negative</th>\n","      <th>City_Frequency_Encoded</th>\n","      <th>Place_Name_Frequency_Encoded</th>\n","      <th>Cuisine_num</th>\n","      <th>Item_Name_num</th>\n","      <th>Prices</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>152.1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15299</td>\n","      <td>1465</td>\n","      <td>12</td>\n","      <td>41026</td>\n","      <td>249.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>152.1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15299</td>\n","      <td>1465</td>\n","      <td>12</td>\n","      <td>12100</td>\n","      <td>129.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>152.1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15299</td>\n","      <td>1465</td>\n","      <td>12</td>\n","      <td>12685</td>\n","      <td>189.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>152.1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15299</td>\n","      <td>1465</td>\n","      <td>12</td>\n","      <td>9157</td>\n","      <td>189.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>152.1</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>15299</td>\n","      <td>1465</td>\n","      <td>12</td>\n","      <td>46356</td>\n","      <td>205.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>121306</th>\n","      <td>50.7</td>\n","      <td>2196.6</td>\n","      <td>0.0</td>\n","      <td>7480</td>\n","      <td>384</td>\n","      <td>31</td>\n","      <td>33338</td>\n","      <td>525.0</td>\n","    </tr>\n","    <tr>\n","      <th>121307</th>\n","      <td>50.7</td>\n","      <td>2196.6</td>\n","      <td>0.0</td>\n","      <td>7480</td>\n","      <td>384</td>\n","      <td>31</td>\n","      <td>33295</td>\n","      <td>525.0</td>\n","    </tr>\n","    <tr>\n","      <th>121308</th>\n","      <td>50.7</td>\n","      <td>2196.6</td>\n","      <td>0.0</td>\n","      <td>7480</td>\n","      <td>384</td>\n","      <td>31</td>\n","      <td>33247</td>\n","      <td>525.0</td>\n","    </tr>\n","    <tr>\n","      <th>121309</th>\n","      <td>50.7</td>\n","      <td>2196.6</td>\n","      <td>0.0</td>\n","      <td>7480</td>\n","      <td>384</td>\n","      <td>31</td>\n","      <td>33258</td>\n","      <td>525.0</td>\n","    </tr>\n","    <tr>\n","      <th>121310</th>\n","      <td>50.7</td>\n","      <td>2196.6</td>\n","      <td>0.0</td>\n","      <td>7480</td>\n","      <td>384</td>\n","      <td>31</td>\n","      <td>23237</td>\n","      <td>595.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>121311 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65afa041-fb9d-4d5e-a01a-65bd1467d01e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-65afa041-fb9d-4d5e-a01a-65bd1467d01e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-65afa041-fb9d-4d5e-a01a-65bd1467d01e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-08f6dc97-5692-45ed-82dd-115eccc39e7b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08f6dc97-5692-45ed-82dd-115eccc39e7b')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const charts = await google.colab.kernel.invokeFunction(\n","          'suggestCharts', [key], {});\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-08f6dc97-5692-45ed-82dd-115eccc39e7b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#피처와 타겟 분리\n","feature_cols = ['Dining_Rating_total','Delivery_Rating_total','Negative','City_Frequency_Encoded','Place_Name_Frequency_Encoded','Cuisine_num','Item_Name_num']\n","label = df.pop('Prices')\n","feature = df[feature_cols].copy()\n","\n","from sklearn.model_selection import train_test_split\n","\n","train_x, test_x, train_y, test_y = train_test_split(feature, label,  test_size=0.2, random_state=100)"],"metadata":{"id":"LXMca1zJNVoE","executionInfo":{"status":"ok","timestamp":1692439642571,"user_tz":-540,"elapsed":338,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["#입력데이터의 개수를 제외한 나머지는 다 같은 조건\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","\n","\n","model1 = Sequential([\n","    Dense(units=32, activation='relu', input_shape=[7]),\n","    Dense(units=16, activation='relu',),\n","    Dense(units=1)\n","])\n","\n","model1.compile(loss='mae',\n","             optimizer='adam',\n","             metrics=['mae','mse'])"],"metadata":{"id":"wzq3DDOpQ31f","executionInfo":{"status":"ok","timestamp":1692439650814,"user_tz":-540,"elapsed":3,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["model1.fit(train_x, train_y, epochs=50)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UL-GkzZ1Q52-","executionInfo":{"status":"ok","timestamp":1692439873127,"user_tz":-540,"elapsed":198527,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"55a26cfd-92a8-40a2-d619-4309bbf18c56"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","3033/3033 [==============================] - 6s 2ms/step - loss: 157.9866 - mae: 157.9866 - mse: 113912.9297\n","Epoch 2/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 127.0955 - mae: 127.0955 - mse: 43111.1289\n","Epoch 3/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 125.3699 - mae: 125.3699 - mse: 42496.3047\n","Epoch 4/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 123.3808 - mae: 123.3808 - mse: 41941.4570\n","Epoch 5/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 122.3580 - mae: 122.3580 - mse: 41474.7891\n","Epoch 6/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 121.3033 - mae: 121.3033 - mse: 41191.8047\n","Epoch 7/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 119.8699 - mae: 119.8699 - mse: 40709.7383\n","Epoch 8/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 119.5613 - mae: 119.5613 - mse: 40617.2734\n","Epoch 9/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 118.6398 - mae: 118.6398 - mse: 40315.1094\n","Epoch 10/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 118.3620 - mae: 118.3620 - mse: 40324.8281\n","Epoch 11/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 117.9366 - mae: 117.9366 - mse: 40209.5352\n","Epoch 12/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 117.6015 - mae: 117.6015 - mse: 40137.9688\n","Epoch 13/50\n","3033/3033 [==============================] - 5s 2ms/step - loss: 117.4009 - mae: 117.4009 - mse: 40054.1914\n","Epoch 14/50\n","3033/3033 [==============================] - 5s 2ms/step - loss: 116.9979 - mae: 116.9979 - mse: 39956.3711\n","Epoch 15/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 116.5770 - mae: 116.5770 - mse: 39889.0820\n","Epoch 16/50\n","3033/3033 [==============================] - 5s 2ms/step - loss: 116.1830 - mae: 116.1830 - mse: 39748.8633\n","Epoch 17/50\n","3033/3033 [==============================] - 5s 2ms/step - loss: 116.0005 - mae: 116.0005 - mse: 39710.6641\n","Epoch 18/50\n","3033/3033 [==============================] - 5s 2ms/step - loss: 115.7450 - mae: 115.7450 - mse: 39668.2969\n","Epoch 19/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 115.6070 - mae: 115.6070 - mse: 39665.7539\n","Epoch 20/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 115.5816 - mae: 115.5816 - mse: 39595.8750\n","Epoch 21/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 115.3307 - mae: 115.3307 - mse: 39557.1445\n","Epoch 22/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 115.1685 - mae: 115.1685 - mse: 39530.2969\n","Epoch 23/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 115.0606 - mae: 115.0606 - mse: 39440.1484\n","Epoch 24/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 114.8199 - mae: 114.8199 - mse: 39385.7578\n","Epoch 25/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 114.7353 - mae: 114.7353 - mse: 39306.1211\n","Epoch 26/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 114.6402 - mae: 114.6402 - mse: 39286.7227\n","Epoch 27/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 114.4744 - mae: 114.4744 - mse: 39251.5898\n","Epoch 28/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 114.3458 - mae: 114.3458 - mse: 39195.7617\n","Epoch 29/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 114.2506 - mae: 114.2506 - mse: 39101.2031\n","Epoch 30/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 114.0785 - mae: 114.0785 - mse: 39022.9570\n","Epoch 31/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 114.0804 - mae: 114.0804 - mse: 39051.3594\n","Epoch 32/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.9007 - mae: 113.9007 - mse: 39026.4688\n","Epoch 33/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.8580 - mae: 113.8580 - mse: 38963.2969\n","Epoch 34/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.8149 - mae: 113.8149 - mse: 38986.2070\n","Epoch 35/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 113.6525 - mae: 113.6525 - mse: 38937.0898\n","Epoch 36/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.6137 - mae: 113.6137 - mse: 38913.1641\n","Epoch 37/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.5679 - mae: 113.5679 - mse: 38928.1758\n","Epoch 38/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 113.5027 - mae: 113.5027 - mse: 38866.9023\n","Epoch 39/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.3857 - mae: 113.3857 - mse: 38830.6016\n","Epoch 40/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.4043 - mae: 113.4043 - mse: 38805.6562\n","Epoch 41/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 113.3378 - mae: 113.3378 - mse: 38844.9336\n","Epoch 42/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.2878 - mae: 113.2878 - mse: 38798.6562\n","Epoch 43/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.1634 - mae: 113.1634 - mse: 38775.6914\n","Epoch 44/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.0830 - mae: 113.0830 - mse: 38714.4609\n","Epoch 45/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 113.0496 - mae: 113.0496 - mse: 38705.4453\n","Epoch 46/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 112.9923 - mae: 112.9923 - mse: 38676.5430\n","Epoch 47/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 112.8830 - mae: 112.8830 - mse: 38694.2891\n","Epoch 48/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 112.8769 - mae: 112.8769 - mse: 38611.7305\n","Epoch 49/50\n","3033/3033 [==============================] - 3s 1ms/step - loss: 112.6372 - mae: 112.6372 - mse: 38574.4414\n","Epoch 50/50\n","3033/3033 [==============================] - 4s 1ms/step - loss: 112.7064 - mae: 112.7064 - mse: 38602.7539\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x795194b00bb0>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","import numpy as np\n","lr = LinearRegression()\n","lr.fit(train_x,train_y)\n","y_preds = lr.predict(test_x)\n","mse = mean_squared_error(test_y, y_preds)\n","rmse = np.sqrt(mse)\n","\n","print(mse, rmse)\n","print(r2_score(test_y, y_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ln_4LL9qQ_y-","executionInfo":{"status":"ok","timestamp":1692439902436,"user_tz":-540,"elapsed":461,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"228958bc-7cb9-4d07-eeeb-5a2110581e17"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["36480.609315685106 190.99897726345318\n","0.013556079869887272\n"]}]},{"cell_type":"markdown","source":["- 데이터의 모든 컬럼을 이용할 필요는 없음\n","- 인코딩을 하고 나서 스케일링까지 하는 것이 좋다.\n","- 있는 그대로의 데이터를 사용하는 것도 좋지만 컬럼들을 이용해서 유의미한 컬럼을 추가해보자."],"metadata":{"id":"lLcOu9rwR4gZ"}},{"cell_type":"code","source":[],"metadata":{"id":"LbrZWa4dR3P9"},"execution_count":null,"outputs":[]}]}