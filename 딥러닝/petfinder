{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPfaxWsYNh2DHWdEx0uP3gf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"DkBvT-VtY2cs","executionInfo":{"status":"ok","timestamp":1679552605763,"user_tz":-540,"elapsed":3786,"user":{"displayName":"김현태","userId":"03086644637186436559"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf"]},{"cell_type":"code","source":["import pathlib\n","\n","dataset_url = 'http://storage.googleapis.com/download.tensorflow.org/data/petfinder-mini.zip'\n","csv_file = 'datasets/petfinder-mini/petfinder-mini.csv'\n","\n","tf.keras.utils.get_file('petfinder_mini.zip', dataset_url,\n","                        extract=True, cache_dir='.')\n","df = pd.read_csv(csv_file)"],"metadata":{"id":"8GkZO9nGZGOx","executionInfo":{"status":"ok","timestamp":1679552606600,"user_tz":-540,"elapsed":870,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9b4cbe5e-83bb-45d5-ec1a-578ab55fa00f"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from http://storage.googleapis.com/download.tensorflow.org/data/petfinder-mini.zip\n","1668792/1668792 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"code","source":["df['AdoptionSpeed'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4LdQAx0YIuVk","executionInfo":{"status":"ok","timestamp":1679552637765,"user_tz":-540,"elapsed":8,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"e61f5750-9ea6-4b4b-f570-c28b75f6af0a"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2    3153\n","4    3080\n","3    2543\n","1    2432\n","0     329\n","Name: AdoptionSpeed, dtype: int64"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"DjEjP3JaZGgr","executionInfo":{"status":"ok","timestamp":1679490548898,"user_tz":-540,"elapsed":13,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"f3420fc9-bf05-4286-9de8-b2db8fbae8a3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                Age           Fee      PhotoAmt  AdoptionSpeed\n","count  11537.000000  11537.000000  11537.000000   11537.000000\n","mean      11.743434     23.957268      3.610211       2.486522\n","std       19.324221     80.024226      3.145872       1.173275\n","min        0.000000      0.000000      0.000000       0.000000\n","25%        2.000000      0.000000      2.000000       2.000000\n","50%        4.000000      0.000000      3.000000       2.000000\n","75%       12.000000      0.000000      5.000000       4.000000\n","max      255.000000   2000.000000     30.000000       4.000000"],"text/html":["\n","  <div id=\"df-2868c15e-bbcb-412b-ad04-252b8b789106\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>Fee</th>\n","      <th>PhotoAmt</th>\n","      <th>AdoptionSpeed</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>11537.000000</td>\n","      <td>11537.000000</td>\n","      <td>11537.000000</td>\n","      <td>11537.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>11.743434</td>\n","      <td>23.957268</td>\n","      <td>3.610211</td>\n","      <td>2.486522</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>19.324221</td>\n","      <td>80.024226</td>\n","      <td>3.145872</td>\n","      <td>1.173275</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>4.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>12.000000</td>\n","      <td>0.000000</td>\n","      <td>5.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>255.000000</td>\n","      <td>2000.000000</td>\n","      <td>30.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2868c15e-bbcb-412b-ad04-252b8b789106')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2868c15e-bbcb-412b-ad04-252b8b789106 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2868c15e-bbcb-412b-ad04-252b8b789106');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a70p3Ni8ZMFF","executionInfo":{"status":"ok","timestamp":1679490548898,"user_tz":-540,"elapsed":12,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"dd586c92-b4ea-426f-f89e-c78e6a19113a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 11537 entries, 0 to 11536\n","Data columns (total 15 columns):\n"," #   Column         Non-Null Count  Dtype \n","---  ------         --------------  ----- \n"," 0   Type           11537 non-null  object\n"," 1   Age            11537 non-null  int64 \n"," 2   Breed1         11537 non-null  object\n"," 3   Gender         11537 non-null  object\n"," 4   Color1         11537 non-null  object\n"," 5   Color2         11537 non-null  object\n"," 6   MaturitySize   11537 non-null  object\n"," 7   FurLength      11537 non-null  object\n"," 8   Vaccinated     11537 non-null  object\n"," 9   Sterilized     11537 non-null  object\n"," 10  Health         11537 non-null  object\n"," 11  Fee            11537 non-null  int64 \n"," 12  Description    11528 non-null  object\n"," 13  PhotoAmt       11537 non-null  int64 \n"," 14  AdoptionSpeed  11537 non-null  int64 \n","dtypes: int64(4), object(11)\n","memory usage: 1.3+ MB\n"]}]},{"cell_type":"code","source":["df['Type'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f2n91r9zZOkR","executionInfo":{"status":"ok","timestamp":1679490548898,"user_tz":-540,"elapsed":9,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"9f564bfc-6863-4624-9bc7-1be5d6f920a9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Dog    6601\n","Cat    4936\n","Name: Type, dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df = df.drop(columns=['Description'])"],"metadata":{"id":"9to2U88oZWkw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install sklearn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xsS5gTVGbBRO","executionInfo":{"status":"ok","timestamp":1679490551965,"user_tz":-540,"elapsed":3075,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"16291ec6-a7bc-4d7d-96fb-7452d57b111f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.9/dist-packages (0.0.post1)\n"]}]},{"cell_type":"code","source":["from tensorflow import feature_column\n","from tensorflow.keras import layers\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"DpqDXBw5bC2o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["##데이터셋 분류\n","train, test = train_test_split(df, test_size = 0.2)\n","train, val = train_test_split(df, test_size = 0.2)\n","print(len(train), ' 훈련셋 수')\n","print(len(val), ' 검증셋 수')\n","print(len(test), ' 테스트셋 수')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DJsMBcgIbFr0","executionInfo":{"status":"ok","timestamp":1679490552570,"user_tz":-540,"elapsed":10,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"ea23b9ca-d1bc-444b-e4c5-1f0ed474747c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9229  훈련셋 수\n","2308  검증셋 수\n","2308  테스트셋 수\n"]}]},{"cell_type":"code","source":["def df_to_dataset(df,label_col, label_mode='binary', shuffle=True, batch_size=32):\n","    labels = df.pop('AdoptionSpeed')\n","    if label_mode == 'binary':\n","        labels = np.array(labels).astype('float32')\n","    else:\n","        labels = tf.keras.utils.to_categorical(labels)\n","    ds = tf.data.Dataset.from_tensor_slices((dict(df), labels))\n","    if shuffle:\n","        ds = ds.shuffle(buffer_size=len(df))\n","    ds = ds.batch(batch_size)\n","\n","    return ds\n"],"metadata":{"id":"Qb9uLPeRbHEO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(train.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jq459WotXDuw","executionInfo":{"status":"ok","timestamp":1679490552571,"user_tz":-540,"elapsed":9,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"7521af04-55f6-46be-c7d7-daa270fbd2d2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Type', 'Age', 'Breed1', 'Gender', 'Color1', 'Color2', 'MaturitySize',\n","       'FurLength', 'Vaccinated', 'Sterilized', 'Health', 'Fee', 'PhotoAmt',\n","       'AdoptionSpeed'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["feature_columns = []"],"metadata":{"id":"a15EBsjldEfj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for header in ['PhotoAmt', 'Fee', 'Age'] :\n","  feature_columns.append(feature_column.numeric_column(header))"],"metadata":{"id":"BZXMT0dKe6tc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["age = feature_column.numeric_column('Age')\n","age_buckets = feature_column.bucketized_column(age, boundaries = [1, 2, 4, 12])\n","feature_columns.append(age_buckets)"],"metadata":{"id":"NsgKrOLUe7mf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["indicator_column_names = ['Type', 'Color1', 'Color2', 'Gender', 'MaturitySize',\n","                          'FurLength', 'Vaccinated', 'Sterilized', 'Health']\n","for col_name in indicator_column_names:\n","  categorical_column = feature_column.categorical_column_with_vocabulary_list(\n","      col_name, df[col_name].unique())\n","  indicator_column = feature_column.indicator_column(categorical_column)\n","  feature_columns.append(indicator_column)"],"metadata":{"id":"iiKXJGS9e9KS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["breed1 = feature_column.categorical_column_with_vocabulary_list('Breed1', df.Breed1.unique())\n","breed1_embedding = feature_column.embedding_column(breed1, dimension = 8)\n","feature_columns.append(breed1_embedding)"],"metadata":{"id":"wuOIvEGpfZIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["animal_type = feature_column.categorical_column_with_vocabulary_list('Type', ['Cat', 'Dog'])\n","animal_type_one_hot = feature_column.indicator_column(animal_type)"],"metadata":{"id":"6D9YjaPSfhLp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["age_type_feature = feature_column.crossed_column([age_buckets, animal_type], hash_bucket_size=100)\n","feature_columns.append(feature_column.indicator_column(age_type_feature))"],"metadata":{"id":"SzC0vx8mfa0G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["feature_layer = tf.keras.layers.DenseFeatures(feature_columns)"],"metadata":{"id":"3-h6y_Lbfvsj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["batch_size = 32\n","train_ds = df_to_dataset(train,label_col = 'labels',label_mode='categorical', batch_size = batch_size)\n","val_ds = df_to_dataset(val,label_col = 'labels', label_mode = 'categorical', shuffle = False,  batch_size = batch_size)\n","test_ds = df_to_dataset(test,label_col = 'labels',label_mode='categorical', shuffle = False, batch_size = batch_size)"],"metadata":{"id":"mIhZk2z_gFw_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = tf.keras.Sequential([\n","  feature_layer,\n","  layers.Dense(128, activation='relu'),\n","  layers.Dense(128, activation='relu'),\n","  layers.Dropout(.1),\n","  layers.Dense(5, activation = \"softmax\" )\n","])\n","\n","\n","model.compile(optimizer='adam',\n","              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n","              metrics=['accuracy'])\n","\n","model.fit(train_ds,\n","          validation_data=val_ds,\n","          epochs=100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nc4rR8_aJ5Xx","executionInfo":{"status":"ok","timestamp":1679491130399,"user_tz":-540,"elapsed":353692,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"4463e66d-c755-4972-fffb-568ca97a87fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Layers in a Sequential model should only have a single input tensor. Received: inputs={'Type': <tf.Tensor 'IteratorGetNext:11' shape=(None,) dtype=string>, 'Age': <tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=int64>, 'Breed1': <tf.Tensor 'IteratorGetNext:1' shape=(None,) dtype=string>, 'Gender': <tf.Tensor 'IteratorGetNext:6' shape=(None,) dtype=string>, 'Color1': <tf.Tensor 'IteratorGetNext:2' shape=(None,) dtype=string>, 'Color2': <tf.Tensor 'IteratorGetNext:3' shape=(None,) dtype=string>, 'MaturitySize': <tf.Tensor 'IteratorGetNext:8' shape=(None,) dtype=string>, 'FurLength': <tf.Tensor 'IteratorGetNext:5' shape=(None,) dtype=string>, 'Vaccinated': <tf.Tensor 'IteratorGetNext:12' shape=(None,) dtype=string>, 'Sterilized': <tf.Tensor 'IteratorGetNext:10' shape=(None,) dtype=string>, 'Health': <tf.Tensor 'IteratorGetNext:7' shape=(None,) dtype=string>, 'Fee': <tf.Tensor 'IteratorGetNext:4' shape=(None,) dtype=int64>, 'PhotoAmt': <tf.Tensor 'IteratorGetNext:9' shape=(None,) dtype=int64>}. Consider rewriting this model with the Functional API.\n","WARNING:tensorflow:Layers in a Sequential model should only have a single input tensor. Received: inputs={'Type': <tf.Tensor 'IteratorGetNext:11' shape=(None,) dtype=string>, 'Age': <tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=int64>, 'Breed1': <tf.Tensor 'IteratorGetNext:1' shape=(None,) dtype=string>, 'Gender': <tf.Tensor 'IteratorGetNext:6' shape=(None,) dtype=string>, 'Color1': <tf.Tensor 'IteratorGetNext:2' shape=(None,) dtype=string>, 'Color2': <tf.Tensor 'IteratorGetNext:3' shape=(None,) dtype=string>, 'MaturitySize': <tf.Tensor 'IteratorGetNext:8' shape=(None,) dtype=string>, 'FurLength': <tf.Tensor 'IteratorGetNext:5' shape=(None,) dtype=string>, 'Vaccinated': <tf.Tensor 'IteratorGetNext:12' shape=(None,) dtype=string>, 'Sterilized': <tf.Tensor 'IteratorGetNext:10' shape=(None,) dtype=string>, 'Health': <tf.Tensor 'IteratorGetNext:7' shape=(None,) dtype=string>, 'Fee': <tf.Tensor 'IteratorGetNext:4' shape=(None,) dtype=int64>, 'PhotoAmt': <tf.Tensor 'IteratorGetNext:9' shape=(None,) dtype=int64>}. Consider rewriting this model with the Functional API.\n"]},{"output_type":"stream","name":"stdout","text":["289/289 [==============================] - ETA: 0s - loss: 1.6945 - accuracy: 0.3466"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Layers in a Sequential model should only have a single input tensor. Received: inputs={'Type': <tf.Tensor 'IteratorGetNext:11' shape=(None,) dtype=string>, 'Age': <tf.Tensor 'IteratorGetNext:0' shape=(None,) dtype=int64>, 'Breed1': <tf.Tensor 'IteratorGetNext:1' shape=(None,) dtype=string>, 'Gender': <tf.Tensor 'IteratorGetNext:6' shape=(None,) dtype=string>, 'Color1': <tf.Tensor 'IteratorGetNext:2' shape=(None,) dtype=string>, 'Color2': <tf.Tensor 'IteratorGetNext:3' shape=(None,) dtype=string>, 'MaturitySize': <tf.Tensor 'IteratorGetNext:8' shape=(None,) dtype=string>, 'FurLength': <tf.Tensor 'IteratorGetNext:5' shape=(None,) dtype=string>, 'Vaccinated': <tf.Tensor 'IteratorGetNext:12' shape=(None,) dtype=string>, 'Sterilized': <tf.Tensor 'IteratorGetNext:10' shape=(None,) dtype=string>, 'Health': <tf.Tensor 'IteratorGetNext:7' shape=(None,) dtype=string>, 'Fee': <tf.Tensor 'IteratorGetNext:4' shape=(None,) dtype=int64>, 'PhotoAmt': <tf.Tensor 'IteratorGetNext:9' shape=(None,) dtype=int64>}. Consider rewriting this model with the Functional API.\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r289/289 [==============================] - 9s 19ms/step - loss: 1.6945 - accuracy: 0.3466 - val_loss: 1.4136 - val_accuracy: 0.3748\n","Epoch 2/100\n","289/289 [==============================] - 3s 11ms/step - loss: 1.4060 - accuracy: 0.3810 - val_loss: 1.3789 - val_accuracy: 0.3843\n","Epoch 3/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.3597 - accuracy: 0.3937 - val_loss: 1.3805 - val_accuracy: 0.3847\n","Epoch 4/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.3449 - accuracy: 0.4049 - val_loss: 1.3832 - val_accuracy: 0.3865\n","Epoch 5/100\n","289/289 [==============================] - 4s 12ms/step - loss: 1.3363 - accuracy: 0.4082 - val_loss: 1.3775 - val_accuracy: 0.3800\n","Epoch 6/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.3229 - accuracy: 0.4103 - val_loss: 1.3636 - val_accuracy: 0.3977\n","Epoch 7/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.3107 - accuracy: 0.4231 - val_loss: 1.3721 - val_accuracy: 0.3878\n","Epoch 8/100\n","289/289 [==============================] - 4s 12ms/step - loss: 1.3104 - accuracy: 0.4204 - val_loss: 1.3748 - val_accuracy: 0.4038\n","Epoch 9/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.2980 - accuracy: 0.4322 - val_loss: 1.3573 - val_accuracy: 0.3921\n","Epoch 10/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.2861 - accuracy: 0.4356 - val_loss: 1.3640 - val_accuracy: 0.3934\n","Epoch 11/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.2792 - accuracy: 0.4421 - val_loss: 1.3654 - val_accuracy: 0.3956\n","Epoch 12/100\n","289/289 [==============================] - 4s 12ms/step - loss: 1.2628 - accuracy: 0.4491 - val_loss: 1.3631 - val_accuracy: 0.3860\n","Epoch 13/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.2562 - accuracy: 0.4554 - val_loss: 1.3816 - val_accuracy: 0.3804\n","Epoch 14/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.2449 - accuracy: 0.4579 - val_loss: 1.3915 - val_accuracy: 0.3921\n","Epoch 15/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.2340 - accuracy: 0.4643 - val_loss: 1.3909 - val_accuracy: 0.3817\n","Epoch 16/100\n","289/289 [==============================] - 4s 12ms/step - loss: 1.2233 - accuracy: 0.4726 - val_loss: 1.4071 - val_accuracy: 0.3735\n","Epoch 17/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.2147 - accuracy: 0.4763 - val_loss: 1.3996 - val_accuracy: 0.3934\n","Epoch 18/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.2007 - accuracy: 0.4839 - val_loss: 1.4180 - val_accuracy: 0.3800\n","Epoch 19/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.1893 - accuracy: 0.4874 - val_loss: 1.4015 - val_accuracy: 0.3964\n","Epoch 20/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.1754 - accuracy: 0.4970 - val_loss: 1.4080 - val_accuracy: 0.3917\n","Epoch 21/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.1619 - accuracy: 0.5051 - val_loss: 1.4293 - val_accuracy: 0.3791\n","Epoch 22/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.1552 - accuracy: 0.5074 - val_loss: 1.4419 - val_accuracy: 0.3748\n","Epoch 23/100\n","289/289 [==============================] - 3s 12ms/step - loss: 1.1392 - accuracy: 0.5188 - val_loss: 1.4706 - val_accuracy: 0.3821\n","Epoch 24/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.1294 - accuracy: 0.5237 - val_loss: 1.4452 - val_accuracy: 0.3808\n","Epoch 25/100\n","289/289 [==============================] - 3s 12ms/step - loss: 1.1143 - accuracy: 0.5289 - val_loss: 1.4817 - val_accuracy: 0.3882\n","Epoch 26/100\n","289/289 [==============================] - 4s 12ms/step - loss: 1.1030 - accuracy: 0.5333 - val_loss: 1.4859 - val_accuracy: 0.3705\n","Epoch 27/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.0886 - accuracy: 0.5409 - val_loss: 1.4978 - val_accuracy: 0.3869\n","Epoch 28/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.0774 - accuracy: 0.5443 - val_loss: 1.5251 - val_accuracy: 0.3834\n","Epoch 29/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.0703 - accuracy: 0.5547 - val_loss: 1.5048 - val_accuracy: 0.3843\n","Epoch 30/100\n","289/289 [==============================] - 4s 12ms/step - loss: 1.0528 - accuracy: 0.5631 - val_loss: 1.5495 - val_accuracy: 0.3726\n","Epoch 31/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.0430 - accuracy: 0.5602 - val_loss: 1.5691 - val_accuracy: 0.3735\n","Epoch 32/100\n","289/289 [==============================] - 3s 9ms/step - loss: 1.0308 - accuracy: 0.5626 - val_loss: 1.5795 - val_accuracy: 0.3722\n","Epoch 33/100\n","289/289 [==============================] - 3s 10ms/step - loss: 1.0240 - accuracy: 0.5718 - val_loss: 1.5812 - val_accuracy: 0.3739\n","Epoch 34/100\n","289/289 [==============================] - 4s 14ms/step - loss: 1.0085 - accuracy: 0.5794 - val_loss: 1.6071 - val_accuracy: 0.3774\n","Epoch 35/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9981 - accuracy: 0.5775 - val_loss: 1.6108 - val_accuracy: 0.3774\n","Epoch 36/100\n","289/289 [==============================] - 3s 9ms/step - loss: 0.9849 - accuracy: 0.5864 - val_loss: 1.6363 - val_accuracy: 0.3683\n","Epoch 37/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9716 - accuracy: 0.5922 - val_loss: 1.6746 - val_accuracy: 0.3791\n","Epoch 38/100\n","289/289 [==============================] - 3s 9ms/step - loss: 0.9668 - accuracy: 0.5994 - val_loss: 1.6759 - val_accuracy: 0.3709\n","Epoch 39/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9555 - accuracy: 0.6022 - val_loss: 1.6802 - val_accuracy: 0.3726\n","Epoch 40/100\n","289/289 [==============================] - 4s 14ms/step - loss: 0.9432 - accuracy: 0.6044 - val_loss: 1.6986 - val_accuracy: 0.3648\n","Epoch 41/100\n","289/289 [==============================] - 3s 9ms/step - loss: 0.9393 - accuracy: 0.6078 - val_loss: 1.7284 - val_accuracy: 0.3752\n","Epoch 42/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9353 - accuracy: 0.6105 - val_loss: 1.7652 - val_accuracy: 0.3592\n","Epoch 43/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9193 - accuracy: 0.6170 - val_loss: 1.7567 - val_accuracy: 0.3761\n","Epoch 44/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9121 - accuracy: 0.6187 - val_loss: 1.7826 - val_accuracy: 0.3731\n","Epoch 45/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.9018 - accuracy: 0.6243 - val_loss: 1.8129 - val_accuracy: 0.3791\n","Epoch 46/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8902 - accuracy: 0.6313 - val_loss: 1.8080 - val_accuracy: 0.3817\n","Epoch 47/100\n","289/289 [==============================] - 4s 14ms/step - loss: 0.8766 - accuracy: 0.6385 - val_loss: 1.8335 - val_accuracy: 0.3739\n","Epoch 48/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8748 - accuracy: 0.6350 - val_loss: 1.8443 - val_accuracy: 0.3631\n","Epoch 49/100\n","289/289 [==============================] - 3s 9ms/step - loss: 0.8620 - accuracy: 0.6398 - val_loss: 1.9037 - val_accuracy: 0.3826\n","Epoch 50/100\n","289/289 [==============================] - 3s 12ms/step - loss: 0.8592 - accuracy: 0.6390 - val_loss: 1.9106 - val_accuracy: 0.3726\n","Epoch 51/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8523 - accuracy: 0.6408 - val_loss: 1.9344 - val_accuracy: 0.3648\n","Epoch 52/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8446 - accuracy: 0.6455 - val_loss: 1.9206 - val_accuracy: 0.3657\n","Epoch 53/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.8353 - accuracy: 0.6581 - val_loss: 1.9870 - val_accuracy: 0.3670\n","Epoch 54/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8287 - accuracy: 0.6478 - val_loss: 1.9790 - val_accuracy: 0.3709\n","Epoch 55/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8241 - accuracy: 0.6538 - val_loss: 1.9766 - val_accuracy: 0.3726\n","Epoch 56/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.8042 - accuracy: 0.6648 - val_loss: 1.9866 - val_accuracy: 0.3834\n","Epoch 57/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8116 - accuracy: 0.6601 - val_loss: 2.0155 - val_accuracy: 0.3718\n","Epoch 58/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.8053 - accuracy: 0.6636 - val_loss: 2.0044 - val_accuracy: 0.3804\n","Epoch 59/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7962 - accuracy: 0.6678 - val_loss: 2.1052 - val_accuracy: 0.3765\n","Epoch 60/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7917 - accuracy: 0.6685 - val_loss: 2.0564 - val_accuracy: 0.3795\n","Epoch 61/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7821 - accuracy: 0.6756 - val_loss: 2.1013 - val_accuracy: 0.3761\n","Epoch 62/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7761 - accuracy: 0.6752 - val_loss: 2.1191 - val_accuracy: 0.3683\n","Epoch 63/100\n","289/289 [==============================] - 4s 12ms/step - loss: 0.7664 - accuracy: 0.6827 - val_loss: 2.1380 - val_accuracy: 0.3718\n","Epoch 64/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7641 - accuracy: 0.6856 - val_loss: 2.1640 - val_accuracy: 0.3718\n","Epoch 65/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7583 - accuracy: 0.6819 - val_loss: 2.1695 - val_accuracy: 0.3718\n","Epoch 66/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7517 - accuracy: 0.6851 - val_loss: 2.2381 - val_accuracy: 0.3718\n","Epoch 67/100\n","289/289 [==============================] - 4s 12ms/step - loss: 0.7467 - accuracy: 0.6883 - val_loss: 2.2442 - val_accuracy: 0.3700\n","Epoch 68/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7399 - accuracy: 0.6910 - val_loss: 2.2849 - val_accuracy: 0.3653\n","Epoch 69/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7386 - accuracy: 0.6902 - val_loss: 2.2624 - val_accuracy: 0.3683\n","Epoch 70/100\n","289/289 [==============================] - 3s 12ms/step - loss: 0.7368 - accuracy: 0.6951 - val_loss: 2.2906 - val_accuracy: 0.3748\n","Epoch 71/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7298 - accuracy: 0.6991 - val_loss: 2.2877 - val_accuracy: 0.3709\n","Epoch 72/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7160 - accuracy: 0.7054 - val_loss: 2.2988 - val_accuracy: 0.3653\n","Epoch 73/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7200 - accuracy: 0.7005 - val_loss: 2.3403 - val_accuracy: 0.3726\n","Epoch 74/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7196 - accuracy: 0.6988 - val_loss: 2.3621 - val_accuracy: 0.3674\n","Epoch 75/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7074 - accuracy: 0.7064 - val_loss: 2.4259 - val_accuracy: 0.3666\n","Epoch 76/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.7014 - accuracy: 0.7060 - val_loss: 2.4384 - val_accuracy: 0.3700\n","Epoch 77/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.6970 - accuracy: 0.7106 - val_loss: 2.4374 - val_accuracy: 0.3756\n","Epoch 78/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6918 - accuracy: 0.7133 - val_loss: 2.5183 - val_accuracy: 0.3735\n","Epoch 79/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6876 - accuracy: 0.7143 - val_loss: 2.5038 - val_accuracy: 0.3735\n","Epoch 80/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.6897 - accuracy: 0.7070 - val_loss: 2.4730 - val_accuracy: 0.3774\n","Epoch 81/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6958 - accuracy: 0.7096 - val_loss: 2.5388 - val_accuracy: 0.3713\n","Epoch 82/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6851 - accuracy: 0.7161 - val_loss: 2.5195 - val_accuracy: 0.3679\n","Epoch 83/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6783 - accuracy: 0.7187 - val_loss: 2.5304 - val_accuracy: 0.3674\n","Epoch 84/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6716 - accuracy: 0.7200 - val_loss: 2.5456 - val_accuracy: 0.3761\n","Epoch 85/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6691 - accuracy: 0.7221 - val_loss: 2.5644 - val_accuracy: 0.3735\n","Epoch 86/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6741 - accuracy: 0.7191 - val_loss: 2.5707 - val_accuracy: 0.3661\n","Epoch 87/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.6532 - accuracy: 0.7297 - val_loss: 2.5938 - val_accuracy: 0.3635\n","Epoch 88/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6626 - accuracy: 0.7248 - val_loss: 2.6390 - val_accuracy: 0.3735\n","Epoch 89/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6536 - accuracy: 0.7252 - val_loss: 2.6546 - val_accuracy: 0.3653\n","Epoch 90/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6507 - accuracy: 0.7280 - val_loss: 2.6532 - val_accuracy: 0.3778\n","Epoch 91/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.6426 - accuracy: 0.7359 - val_loss: 2.6959 - val_accuracy: 0.3683\n","Epoch 92/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6373 - accuracy: 0.7358 - val_loss: 2.7022 - val_accuracy: 0.3614\n","Epoch 93/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6427 - accuracy: 0.7333 - val_loss: 2.6905 - val_accuracy: 0.3735\n","Epoch 94/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.6400 - accuracy: 0.7362 - val_loss: 2.6977 - val_accuracy: 0.3696\n","Epoch 95/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6307 - accuracy: 0.7363 - val_loss: 2.7396 - val_accuracy: 0.3692\n","Epoch 96/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6287 - accuracy: 0.7389 - val_loss: 2.7955 - val_accuracy: 0.3540\n","Epoch 97/100\n","289/289 [==============================] - 4s 13ms/step - loss: 0.6312 - accuracy: 0.7378 - val_loss: 2.7659 - val_accuracy: 0.3657\n","Epoch 98/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6301 - accuracy: 0.7334 - val_loss: 2.8304 - val_accuracy: 0.3696\n","Epoch 99/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6331 - accuracy: 0.7371 - val_loss: 2.8282 - val_accuracy: 0.3653\n","Epoch 100/100\n","289/289 [==============================] - 3s 10ms/step - loss: 0.6171 - accuracy: 0.7439 - val_loss: 2.8117 - val_accuracy: 0.3787\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f034c1bd9a0>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["loss, accuracy = model.evaluate(test_ds)\n","print(\"Accuracy\", accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"edzVuHrqJ7PG","executionInfo":{"status":"ok","timestamp":1679491197728,"user_tz":-540,"elapsed":683,"user":{"displayName":"김현태","userId":"03086644637186436559"}},"outputId":"2a1867b2-d126-44ca-e0a1-bca6cdb21aba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["73/73 [==============================] - 1s 14ms/step - loss: 0.9460 - accuracy: 0.7197\n","Accuracy 0.7196707129478455\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"8yJMh1pVed9H"},"execution_count":null,"outputs":[]}]}